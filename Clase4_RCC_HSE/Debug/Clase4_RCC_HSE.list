
Clase4_RCC_HSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000054c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006e8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006ec  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006ec  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003205  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a02  00000000  00000000  00023239  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  00023c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c8  00000000  00000000  00023f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148d0  00000000  00000000  00024238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003046  00000000  00000000  00038b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081705  00000000  00000000  0003bb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  000bd2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006c8 	.word	0x080006c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080006c8 	.word	0x080006c8

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	 *
	 * 	-> 84Mhz
	 *
	 */

	FLASH -> ACR |= (1<<8)|(1<<9)|(1<<10)|(1<<11);
 80001d8:	4b51      	ldr	r3, [pc, #324]	; (8000320 <main+0x14c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a50      	ldr	r2, [pc, #320]	; (8000320 <main+0x14c>)
 80001de:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80001e2:	6013      	str	r3, [r2, #0]

	FLASH -> ACR &= ~((1<<0)|(1<<2));	//2 WS
 80001e4:	4b4e      	ldr	r3, [pc, #312]	; (8000320 <main+0x14c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a4d      	ldr	r2, [pc, #308]	; (8000320 <main+0x14c>)
 80001ea:	f023 0305 	bic.w	r3, r3, #5
 80001ee:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= (1<<1);
 80001f0:	4b4b      	ldr	r3, [pc, #300]	; (8000320 <main+0x14c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a4a      	ldr	r2, [pc, #296]	; (8000320 <main+0x14c>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6013      	str	r3, [r2, #0]

	RCC -> CR |= (1<<16);	//HSE ON
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <main+0x150>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a48      	ldr	r2, [pc, #288]	; (8000324 <main+0x150>)
 8000202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000206:	6013      	str	r3, [r2, #0]

	while(!(RCC -> CR & (1<<17)));
 8000208:	bf00      	nop
 800020a:	4b46      	ldr	r3, [pc, #280]	; (8000324 <main+0x150>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <main+0x36>

	// PLL

	//Inicializando
	RCC -> PLLCFGR = 0;
 8000216:	4b43      	ldr	r3, [pc, #268]	; (8000324 <main+0x150>)
 8000218:	2200      	movs	r2, #0
 800021a:	605a      	str	r2, [r3, #4]

	//PLLM
	RCC -> PLLCFGR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<1)|(1<<0));
 800021c:	4b41      	ldr	r3, [pc, #260]	; (8000324 <main+0x150>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a40      	ldr	r2, [pc, #256]	; (8000324 <main+0x150>)
 8000222:	f023 033b 	bic.w	r3, r3, #59	; 0x3b
 8000226:	6053      	str	r3, [r2, #4]
	RCC -> PLLCFGR |=(1<<2);
 8000228:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <main+0x150>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a3d      	ldr	r2, [pc, #244]	; (8000324 <main+0x150>)
 800022e:	f043 0304 	orr.w	r3, r3, #4
 8000232:	6053      	str	r3, [r2, #4]

	//PLLN
	RCC -> PLLCFGR &= ~((1<<6)|(1<<7)|(1<<9)|(1<<11)|(1<<13)|(1<<14));
 8000234:	4b3b      	ldr	r3, [pc, #236]	; (8000324 <main+0x150>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a3a      	ldr	r2, [pc, #232]	; (8000324 <main+0x150>)
 800023a:	f423 43d5 	bic.w	r3, r3, #27264	; 0x6a80
 800023e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000242:	6053      	str	r3, [r2, #4]
	RCC -> PLLCFGR |=(1<<8)|(1<<10)|(1<<12);
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <main+0x150>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a36      	ldr	r2, [pc, #216]	; (8000324 <main+0x150>)
 800024a:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800024e:	6053      	str	r3, [r2, #4]

	//PLLP
	RCC -> PLLCFGR &= ~((1<<17)|(1<<16));
 8000250:	4b34      	ldr	r3, [pc, #208]	; (8000324 <main+0x150>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <main+0x150>)
 8000256:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800025a:	6053      	str	r3, [r2, #4]

	//AHB_PRES
	RCC -> CFGR &= ~((1<<7)|(1<<6)|(1<<5)|(1<<4));
 800025c:	4b31      	ldr	r3, [pc, #196]	; (8000324 <main+0x150>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a30      	ldr	r2, [pc, #192]	; (8000324 <main+0x150>)
 8000262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000266:	6093      	str	r3, [r2, #8]

	//Prescaler para APB1 MAX 42 divided by 2
	RCC -> CFGR |= (1<<12);
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <main+0x150>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a2d      	ldr	r2, [pc, #180]	; (8000324 <main+0x150>)
 800026e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000272:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~((1<<11)|(1<<10));
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <main+0x150>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <main+0x150>)
 800027a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800027e:	6093      	str	r3, [r2, #8]

	//Prescaler para APB2 MAX 84 no divided
	RCC -> CFGR &= ~((1<<13)|(1<<14)|(1<<15));
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <main+0x150>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a27      	ldr	r2, [pc, #156]	; (8000324 <main+0x150>)
 8000286:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800028a:	6093      	str	r3, [r2, #8]

	//Habilitar PLL para MODO HSE
	RCC -> PLLCFGR |= (1<<22);
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <main+0x150>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a24      	ldr	r2, [pc, #144]	; (8000324 <main+0x150>)
 8000292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000296:	6053      	str	r3, [r2, #4]

	//PLL como CLOCK del sistema
	RCC -> CFGR |= (1<<1);
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <main+0x150>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a21      	ldr	r2, [pc, #132]	; (8000324 <main+0x150>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~(1<<0);
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <main+0x150>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a1e      	ldr	r2, [pc, #120]	; (8000324 <main+0x150>)
 80002aa:	f023 0301 	bic.w	r3, r3, #1
 80002ae:	6093      	str	r3, [r2, #8]

	//PLL usado como CLOCK del sistema
	RCC -> CFGR |= (1<<3);
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <main+0x150>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <main+0x150>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~(1<<2);
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <main+0x150>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a18      	ldr	r2, [pc, #96]	; (8000324 <main+0x150>)
 80002c2:	f023 0304 	bic.w	r3, r3, #4
 80002c6:	6093      	str	r3, [r2, #8]

	//PLL ON
	RCC -> CR |= (1<<24);
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x150>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a15      	ldr	r2, [pc, #84]	; (8000324 <main+0x150>)
 80002ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d2:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & (1<<25)));	//STANDBY
 80002d4:	bf00      	nop
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x150>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <main+0x102>

	//Cambiando el systick

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e2:	2003      	movs	r0, #3
 80002e4:	f000 f963 	bl	80005ae <HAL_NVIC_SetPriorityGrouping>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2100      	movs	r1, #0
 80002ec:	f04f 30ff 	mov.w	r0, #4294967295
 80002f0:	f000 f968 	bl	80005c4 <HAL_NVIC_SetPriority>

	SysTick -> LOAD = 84000-1;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <main+0x154>)
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <main+0x158>)
 80002f8:	605a      	str	r2, [r3, #4]
	SysTick -> VAL = 0;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <main+0x154>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
	SysTick -> CTRL |= ((1<<2)|(1<<1)|(1<<0));
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <main+0x154>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <main+0x154>)
 8000306:	f043 0307 	orr.w	r3, r3, #7
 800030a:	6013      	str	r3, [r2, #0]
	//////////////////////////////////////////////////

	/*Inicializacion de led*/
	Led_Init();
 800030c:	f000 f976 	bl	80005fc <Led_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Parpadeo de led*/
	  Led_Toggle();
 8000310:	f000 f9a6 	bl	8000660 <Led_Toggle>
	  HAL_Delay(1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000318:	f000 f898 	bl	800044c <HAL_Delay>
	  Led_Toggle();
 800031c:	e7f8      	b.n	8000310 <main+0x13c>
 800031e:	bf00      	nop
 8000320:	40023c00 	.word	0x40023c00
 8000324:	40023800 	.word	0x40023800
 8000328:	e000e010 	.word	0xe000e010
 800032c:	0001481f 	.word	0x0001481f

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000384:	f000 f842 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <SystemInit+0x28>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <SystemInit+0x28>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SystemInit+0x28>)
 80003a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003a6:	609a      	str	r2, [r3, #8]
#endif
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003be:	e003      	b.n	80003c8 <LoopCopyDataInit>

080003c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003c6:	3104      	adds	r1, #4

080003c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d0:	d3f6      	bcc.n	80003c0 <CopyDataInit>
  ldr  r2, =_sbss
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003d4:	e002      	b.n	80003dc <LoopFillZerobss>

080003d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d8:	f842 3b04 	str.w	r3, [r2], #4

080003dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e0:	d3f9      	bcc.n	80003d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003e2:	f7ff ffd3 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f94b 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff fef3 	bl	80001d4 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80003f4:	080006e8 	.word	0x080006e8
  ldr  r0, =_sdata
 80003f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003fc:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000400:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_IncTick+0x20>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_IncTick+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_IncTick+0x24>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  return uwTick;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <HAL_GetTick+0x14>)
 800043a:	681b      	ldr	r3, [r3, #0]
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000020 	.word	0x20000020

0800044c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000454:	f7ff ffee 	bl	8000434 <HAL_GetTick>
 8000458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000464:	d005      	beq.n	8000472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_Delay+0x40>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	4413      	add	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000472:	bf00      	nop
 8000474:	f7ff ffde 	bl	8000434 <HAL_GetTick>
 8000478:	4602      	mov	r2, r0
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	429a      	cmp	r2, r3
 8000482:	d8f7      	bhi.n	8000474 <HAL_Delay+0x28>
  {
  }
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000000 	.word	0x20000000

08000490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f003 0307 	and.w	r3, r3, #7
 800049e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <__NVIC_SetPriorityGrouping+0x44>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004ac:	4013      	ands	r3, r2
 80004ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004c2:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <__NVIC_SetPriorityGrouping+0x44>)
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	60d3      	str	r3, [r2, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <__NVIC_GetPriorityGrouping+0x18>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	0a1b      	lsrs	r3, r3, #8
 80004e2:	f003 0307 	and.w	r3, r3, #7
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	db0a      	blt.n	800051e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	b2da      	uxtb	r2, r3
 800050c:	490c      	ldr	r1, [pc, #48]	; (8000540 <__NVIC_SetPriority+0x4c>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	0112      	lsls	r2, r2, #4
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	440b      	add	r3, r1
 8000518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800051c:	e00a      	b.n	8000534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4908      	ldr	r1, [pc, #32]	; (8000544 <__NVIC_SetPriority+0x50>)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	f003 030f 	and.w	r3, r3, #15
 800052a:	3b04      	subs	r3, #4
 800052c:	0112      	lsls	r2, r2, #4
 800052e:	b2d2      	uxtb	r2, r2
 8000530:	440b      	add	r3, r1
 8000532:	761a      	strb	r2, [r3, #24]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000e100 	.word	0xe000e100
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000548:	b480      	push	{r7}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f1c3 0307 	rsb	r3, r3, #7
 8000562:	2b04      	cmp	r3, #4
 8000564:	bf28      	it	cs
 8000566:	2304      	movcs	r3, #4
 8000568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3304      	adds	r3, #4
 800056e:	2b06      	cmp	r3, #6
 8000570:	d902      	bls.n	8000578 <NVIC_EncodePriority+0x30>
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3b03      	subs	r3, #3
 8000576:	e000      	b.n	800057a <NVIC_EncodePriority+0x32>
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	43da      	mvns	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	401a      	ands	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000590:	f04f 31ff 	mov.w	r1, #4294967295
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	43d9      	mvns	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	4313      	orrs	r3, r2
         );
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3724      	adds	r7, #36	; 0x24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ff6a 	bl	8000490 <__NVIC_SetPriorityGrouping>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005d6:	f7ff ff7f 	bl	80004d8 <__NVIC_GetPriorityGrouping>
 80005da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	6978      	ldr	r0, [r7, #20]
 80005e2:	f7ff ffb1 	bl	8000548 <NVIC_EncodePriority>
 80005e6:	4602      	mov	r2, r0
 80005e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ec:	4611      	mov	r1, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff80 	bl	80004f4 <__NVIC_SetPriority>
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <Led_Init>:
#include <stm32f401re.h>
#include <stm32f4xx_hal.h>

void Led_Init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	/*Configuracion del */
  RCC -> AHB1ENR |= (1<<0);
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <Led_Init+0x5c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <Led_Init+0x5c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	; 0x30

  	GPIOA -> MODER |= (1<<10);
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <Led_Init+0x60>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <Led_Init+0x60>)
 8000612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000616:	6013      	str	r3, [r2, #0]
  	GPIOA -> MODER &= ~(1<<0);
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <Led_Init+0x60>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <Led_Init+0x60>)
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  	GPIOA -> OTYPER &= ~(1<<5);	//Para salida
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <Led_Init+0x60>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <Led_Init+0x60>)
 800062a:	f023 0320 	bic.w	r3, r3, #32
 800062e:	6053      	str	r3, [r2, #4]

  	GPIOA -> OSPEEDR &= ~((1<<11)|(1<<10));	//Para salida
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <Led_Init+0x60>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	4a09      	ldr	r2, [pc, #36]	; (800065c <Led_Init+0x60>)
 8000636:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800063a:	6093      	str	r3, [r2, #8]

 	GPIOA -> PUPDR &= ~((1<11)|(1<<10));	//Para resistencia pull up/down
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <Led_Init+0x60>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <Led_Init+0x60>)
 8000642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	60d3      	str	r3, [r2, #12]

}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40020000 	.word	0x40020000

08000660 <Led_Toggle>:
{
	GPIOA -> BSRR |= (1<<21);
}

void Led_Toggle(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	GPIOA -> ODR ^= (1<<5); 
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <Led_Toggle+0x1c>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <Led_Toggle+0x1c>)
 800066a:	f083 0320 	eor.w	r3, r3, #32
 800066e:	6153      	str	r3, [r2, #20]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40020000 	.word	0x40020000

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4e0d      	ldr	r6, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1ba4      	subs	r4, r4, r6
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2500      	movs	r5, #0
 800068c:	42a5      	cmp	r5, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4e0b      	ldr	r6, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f818 	bl	80006c8 <_init>
 8000698:	1ba4      	subs	r4, r4, r6
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2500      	movs	r5, #0
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a8:	4798      	blx	r3
 80006aa:	3501      	adds	r5, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b2:	4798      	blx	r3
 80006b4:	3501      	adds	r5, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

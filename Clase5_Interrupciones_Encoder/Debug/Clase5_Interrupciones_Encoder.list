
Clase5_Interrupciones_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000222c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080023cc  080023cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002420  08002420  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002428  08002428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080024a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080024a0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005383  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001051  00000000  00000000  00025423  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000410  00000000  00000000  00026478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000378  00000000  00000000  00026888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151bd  00000000  00000000  00026c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000471c  00000000  00000000  0003bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082304  00000000  00000000  000404d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c27dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000117c  00000000  00000000  000c2858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023b4 	.word	0x080023b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080023b4 	.word	0x080023b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0b      	blt.n	80005ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 021f 	and.w	r2, r3, #31
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <__NVIC_EnableIRQ+0x38>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	095b      	lsrs	r3, r3, #5
 80005b0:	2001      	movs	r0, #1
 80005b2:	fa00 f202 	lsl.w	r2, r0, r2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100

080005cc <EXTI2_IRQHandler>:
uint8_t valor_inicial = 0;
uint8_t contador = 0;

//El codigo para las ISR estan en el "startup"
void EXTI2_IRQHandler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	//Cuando se produce una interrupciones, salta inmediatamente salda al ISR
	//y se habilita un bit de bandera(pending register)

	if(EXTI -> PR & (1<<2))
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <EXTI2_IRQHandler+0x84>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d033      	beq.n	8000644 <EXTI2_IRQHandler+0x78>
	{	//Leemos el estado del bit PC2 y lo desplazamos para guardarlo como un 1
		valor_actual = ((GPIOC -> IDR) & (1<<2))>>2;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <EXTI2_IRQHandler+0x88>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <EXTI2_IRQHandler+0x8c>)
 80005ec:	701a      	strb	r2, [r3, #0]

		if(valor_actual != valor_inicial)
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <EXTI2_IRQHandler+0x8c>)
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <EXTI2_IRQHandler+0x90>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d021      	beq.n	800063e <EXTI2_IRQHandler+0x72>
		{
			if(((GPIOC -> IDR) & (1<<3))>>3 != valor_actual)
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <EXTI2_IRQHandler+0x88>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <EXTI2_IRQHandler+0x8c>)
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	4293      	cmp	r3, r2
 800060a:	d00a      	beq.n	8000622 <EXTI2_IRQHandler+0x56>
			{
				//Sentido Horario
				if(contador < 100)
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <EXTI2_IRQHandler+0x94>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b63      	cmp	r3, #99	; 0x63
 8000612:	d810      	bhi.n	8000636 <EXTI2_IRQHandler+0x6a>
				{
					contador += 10;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <EXTI2_IRQHandler+0x94>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	330a      	adds	r3, #10
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <EXTI2_IRQHandler+0x94>)
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	e009      	b.n	8000636 <EXTI2_IRQHandler+0x6a>

			}
			else
			{
				//Sentido Antihorario
				if(contador >= 10)
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <EXTI2_IRQHandler+0x94>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b09      	cmp	r3, #9
 8000628:	d905      	bls.n	8000636 <EXTI2_IRQHandler+0x6a>
				{
					contador -= 10;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <EXTI2_IRQHandler+0x94>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3b0a      	subs	r3, #10
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <EXTI2_IRQHandler+0x94>)
 8000634:	701a      	strb	r2, [r3, #0]
				}
			}

			valor_inicial = valor_actual;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <EXTI2_IRQHandler+0x8c>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <EXTI2_IRQHandler+0x90>)
 800063c:	701a      	strb	r2, [r3, #0]

		}

		//Sobreescribimos la bandera de interrupcion
		EXTI -> PR = (1<<2);
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <EXTI2_IRQHandler+0x84>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
	}

}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40013c00 	.word	0x40013c00
 8000654:	40020800 	.word	0x40020800
 8000658:	2000008c 	.word	0x2000008c
 800065c:	2000008d 	.word	0x2000008d
 8000660:	2000008e 	.word	0x2000008e

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 f9a9 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f873 	bl	8000758 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  //Inicializando PC2
  RCC -> AHB1ENR |= (1<<2);	//Clock port C
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <main+0xdc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a32      	ldr	r2, [pc, #200]	; (8000740 <main+0xdc>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOC -> MODER &= ~((1<<(2*2))|(1<<(2*(2) + 1))); //Como entrada
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <main+0xe0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a30      	ldr	r2, [pc, #192]	; (8000744 <main+0xe0>)
 8000684:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000688:	6013      	str	r3, [r2, #0]
  GPIOC -> PUPDR &= ~((1<<(2*2))|(1<<(2*(2) + 1))); //No pull up/down
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0xe0>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	4a2d      	ldr	r2, [pc, #180]	; (8000744 <main+0xe0>)
 8000690:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000694:	60d3      	str	r3, [r2, #12]

  //Inicializando PC3
   RCC -> AHB1ENR |= (1<<3);	//Clock port C
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <main+0xdc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a29      	ldr	r2, [pc, #164]	; (8000740 <main+0xdc>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
   GPIOC -> MODER &= ~((1<<(2*3))|(1<<(2*3 + 1))); //Como entrada
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0xe0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a27      	ldr	r2, [pc, #156]	; (8000744 <main+0xe0>)
 80006a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80006ac:	6013      	str	r3, [r2, #0]
   GPIOC -> PUPDR &= ~((1<<(2*3))|(1<<(2*3 + 1))); //No pull up/down
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <main+0xe0>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	4a24      	ldr	r2, [pc, #144]	; (8000744 <main+0xe0>)
 80006b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80006b8:	60d3      	str	r3, [r2, #12]

  //Interrupcion configuracion
  RCC -> APB2ENR |= (1<<14); //Habilitar syscfg
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <main+0xdc>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <main+0xdc>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44

  //El EXTICR1 se encuentra en un array
  //Esta parte es para hacer conexion entre
  //el EXTI y PC2
  SYSCFG -> EXTICR[0] &= ~((1<<8)|(1<<10)|(1<<11));
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <main+0xe4>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <main+0xe4>)
 80006cc:	f423 6350 	bic.w	r3, r3, #3328	; 0xd00
 80006d0:	6093      	str	r3, [r2, #8]
  SYSCFG -> EXTICR[0] |= (1<<9);
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <main+0xe4>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <main+0xe4>)
 80006d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006dc:	6093      	str	r3, [r2, #8]

  //COnfiguracion flanco, enable y prioridad
  EXTI -> RTSR |= (1<<2); 	//En flanco de subida
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <main+0xe8>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <main+0xe8>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6093      	str	r3, [r2, #8]
  EXTI -> FTSR |= (1<<2);	//En flanco de bajada
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <main+0xe8>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <main+0xe8>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	60d3      	str	r3, [r2, #12]
  EXTI -> IMR |= (1<<2); 	//Habilitando interrupcion EXTI2
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <main+0xe8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <main+0xe8>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(EXTI2_IRQn); //EXTI2_IRQn = 8
 8000702:	2008      	movs	r0, #8
 8000704:	f7ff ff44 	bl	8000590 <__NVIC_EnableIRQ>

  //Inicializamos el lcd
  lcd_init();
 8000708:	f000 fedc 	bl	80014c4 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(str_contador, "Encoder = %d",contador);
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <main+0xec>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	463b      	mov	r3, r7
 8000714:	490f      	ldr	r1, [pc, #60]	; (8000754 <main+0xf0>)
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fa46 	bl	8001ba8 <siprintf>
	  lcd_clear();
 800071c:	f001 fa0a 	bl	8001b34 <lcd_clear>
	  lcd_puts(str_contador, strlen(str_contador));
 8000720:	463b      	mov	r3, r7
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd5c 	bl	80001e0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b2da      	uxtb	r2, r3
 800072c:	463b      	mov	r3, r7
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f9e5 	bl	8001b00 <lcd_puts>
	  HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f000 f9b4 	bl	8000aa4 <HAL_Delay>
  {
 800073c:	e7e6      	b.n	800070c <main+0xa8>
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40020800 	.word	0x40020800
 8000748:	40013800 	.word	0x40013800
 800074c:	40013c00 	.word	0x40013c00
 8000750:	2000008e 	.word	0x2000008e
 8000754:	080023cc 	.word	0x080023cc

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fa16 	bl	8001b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <SystemClock_Config+0xb8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <SystemClock_Config+0xb8>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <SystemClock_Config+0xb8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <SystemClock_Config+0xbc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <SystemClock_Config+0xbc>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <SystemClock_Config+0xbc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fa71 	bl	8000cb4 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007d8:	f000 f81e 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fccc 	bl	8001194 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000802:	f000 f809 	bl	8000818 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f8ca 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f001 f91e 	bl	8001b44 <__errno>
 8000908:	4602      	mov	r2, r0
 800090a:	230c      	movs	r3, #12
 800090c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20018000 	.word	0x20018000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000090 	.word	0x20000090
 800093c:	200000a8 	.word	0x200000a8

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <SystemInit+0x28>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a07      	ldr	r2, [pc, #28]	; (8000968 <SystemInit+0x28>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SystemInit+0x28>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
#endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000972:	e003      	b.n	800097c <LoopCopyDataInit>

08000974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800097a:	3104      	adds	r1, #4

0800097c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000984:	d3f6      	bcc.n	8000974 <CopyDataInit>
  ldr  r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000988:	e002      	b.n	8000990 <LoopFillZerobss>

0800098a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800098a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800098c:	f842 3b04 	str.w	r3, [r2], #4

08000990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000994:	d3f9      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000996:	f7ff ffd3 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f001 f8d9 	bl	8001b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fe61 	bl	8000664 <main>
  bx  lr    
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80009a8:	08002430 	.word	0x08002430
  ldr  r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009b0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80009b4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80009b8:	200000a4 	.word	0x200000a4

080009bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_Init+0x40>)
 80009ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_Init+0x40>)
 80009d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x40>)
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f92f 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff ff18 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023c00 	.word	0x40023c00

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f939 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f90f 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000009c 	.word	0x2000009c

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000009c 	.word	0x2000009c

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff ffee 	bl	8000a8c <HAL_GetTick>
 8000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d005      	beq.n	8000aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_Delay+0x40>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aca:	bf00      	nop
 8000acc:	f7ff ffde 	bl	8000a8c <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d8f7      	bhi.n	8000acc <HAL_Delay+0x28>
  {
  }
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff47 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff5c 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffb0 	bl	8000c08 <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e25b      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d075      	beq.n	8000dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cd2:	4ba3      	ldr	r3, [pc, #652]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d00c      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cde:	4ba0      	ldr	r3, [pc, #640]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d112      	bne.n	8000d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cea:	4b9d      	ldr	r3, [pc, #628]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cf6:	d10b      	bne.n	8000d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf8:	4b99      	ldr	r3, [pc, #612]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d05b      	beq.n	8000dbc <HAL_RCC_OscConfig+0x108>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d157      	bne.n	8000dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e236      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d18:	d106      	bne.n	8000d28 <HAL_RCC_OscConfig+0x74>
 8000d1a:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a90      	ldr	r2, [pc, #576]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e01d      	b.n	8000d64 <HAL_RCC_OscConfig+0xb0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x98>
 8000d32:	4b8b      	ldr	r3, [pc, #556]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a8a      	ldr	r2, [pc, #552]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a87      	ldr	r2, [pc, #540]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e00b      	b.n	8000d64 <HAL_RCC_OscConfig+0xb0>
 8000d4c:	4b84      	ldr	r3, [pc, #528]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a83      	ldr	r2, [pc, #524]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a80      	ldr	r2, [pc, #512]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fe8e 	bl	8000a8c <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fe8a 	bl	8000a8c <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e1fb      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0xc0>
 8000d92:	e014      	b.n	8000dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fe7a 	bl	8000a8c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fe76 	bl	8000a8c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e1e7      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dae:	4b6c      	ldr	r3, [pc, #432]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0xe8>
 8000dba:	e000      	b.n	8000dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d063      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d11c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000de2:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d116      	bne.n	8000e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <HAL_RCC_OscConfig+0x152>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d001      	beq.n	8000e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e1bb      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e06:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4952      	ldr	r1, [pc, #328]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1a:	e03a      	b.n	8000e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d020      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e24:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <HAL_RCC_OscConfig+0x2b0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fe2f 	bl	8000a8c <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e32:	f7ff fe2b 	bl	8000a8c <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e19c      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	4940      	ldr	r1, [pc, #256]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
 8000e64:	e015      	b.n	8000e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <HAL_RCC_OscConfig+0x2b0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fe0e 	bl	8000a8c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e74:	f7ff fe0a 	bl	8000a8c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e17b      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d030      	beq.n	8000f00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d016      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <HAL_RCC_OscConfig+0x2b4>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eac:	f7ff fdee 	bl	8000a8c <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fdea 	bl	8000a8c <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e15b      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x200>
 8000ed2:	e015      	b.n	8000f00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_RCC_OscConfig+0x2b4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fdd7 	bl	8000a8c <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fdd3 	bl	8000a8c <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e144      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f0      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a0 	beq.w	800104e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10f      	bne.n	8000f3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_RCC_OscConfig+0x2b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d121      	bne.n	8000f8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_RCC_OscConfig+0x2b8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_RCC_OscConfig+0x2b8>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fd99 	bl	8000a8c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	e011      	b.n	8000f82 <HAL_RCC_OscConfig+0x2ce>
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	42470000 	.word	0x42470000
 8000f68:	42470e80 	.word	0x42470e80
 8000f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f70:	f7ff fd8c 	bl	8000a8c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e0fd      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_RCC_OscConfig+0x4d4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
 8000f96:	4b7d      	ldr	r3, [pc, #500]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	4a7c      	ldr	r2, [pc, #496]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa2:	e01c      	b.n	8000fde <HAL_RCC_OscConfig+0x32a>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d10c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x312>
 8000fac:	4b77      	ldr	r3, [pc, #476]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a76      	ldr	r2, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb8:	4b74      	ldr	r3, [pc, #464]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbc:	4a73      	ldr	r2, [pc, #460]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc4:	e00b      	b.n	8000fde <HAL_RCC_OscConfig+0x32a>
 8000fc6:	4b71      	ldr	r3, [pc, #452]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a70      	ldr	r2, [pc, #448]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd2:	4b6e      	ldr	r3, [pc, #440]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a6d      	ldr	r2, [pc, #436]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d015      	beq.n	8001012 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fd51 	bl	8000a8c <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fd4d 	bl	8000a8c <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e0bc      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	4b61      	ldr	r3, [pc, #388]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8001006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0ee      	beq.n	8000fee <HAL_RCC_OscConfig+0x33a>
 8001010:	e014      	b.n	800103c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fd3b 	bl	8000a8c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff fd37 	bl	8000a8c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f241 3288 	movw	r2, #5000	; 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e0a6      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8001032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ee      	bne.n	800101a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001042:	4b52      	ldr	r3, [pc, #328]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a51      	ldr	r2, [pc, #324]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8001048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8092 	beq.w	800117c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001058:	4b4c      	ldr	r3, [pc, #304]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d05c      	beq.n	800111e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d141      	bne.n	80010f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <HAL_RCC_OscConfig+0x4dc>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fd0b 	bl	8000a8c <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff fd07 	bl	8000a8c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e078      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	019b      	lsls	r3, r3, #6
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	085b      	lsrs	r3, r3, #1
 80010b0:	3b01      	subs	r3, #1
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ba:	061b      	lsls	r3, r3, #24
 80010bc:	4933      	ldr	r1, [pc, #204]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_RCC_OscConfig+0x4dc>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fce0 	bl	8000a8c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fcdc 	bl	8000a8c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e04d      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x41c>
 80010ee:	e045      	b.n	800117c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_RCC_OscConfig+0x4dc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fcc9 	bl	8000a8c <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fcc5 	bl	8000a8c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e036      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x44a>
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e029      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_RCC_OscConfig+0x4d8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	429a      	cmp	r2, r3
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001148:	429a      	cmp	r2, r3
 800114a:	d115      	bne.n	8001178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001152:	4013      	ands	r3, r2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001158:	4293      	cmp	r3, r2
 800115a:	d10d      	bne.n	8001178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001166:	429a      	cmp	r2, r3
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000
 800118c:	40023800 	.word	0x40023800
 8001190:	42470060 	.word	0x42470060

08001194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0cc      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a8:	4b68      	ldr	r3, [pc, #416]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d90c      	bls.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b65      	ldr	r3, [pc, #404]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b63      	ldr	r3, [pc, #396]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0b8      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e8:	4b59      	ldr	r3, [pc, #356]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4a58      	ldr	r2, [pc, #352]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800120a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	494d      	ldr	r1, [pc, #308]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d044      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d119      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e07f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d003      	beq.n	8001252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124e:	2b03      	cmp	r3, #3
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e067      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f023 0203 	bic.w	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4934      	ldr	r1, [pc, #208]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001284:	f7ff fc02 	bl	8000a8c <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff fbfe 	bl	8000a8c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e04f      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 020c 	and.w	r2, r3, #12
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d1eb      	bne.n	800128c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d20c      	bcs.n	80012dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e032      	b.n	8001342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4916      	ldr	r1, [pc, #88]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	490e      	ldr	r1, [pc, #56]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800131a:	f000 f821 	bl	8001360 <HAL_RCC_GetSysClockFreq>
 800131e:	4601      	mov	r1, r0
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	fa21 f303 	lsr.w	r3, r1, r3
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fb62 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00
 8001350:	40023800 	.word	0x40023800
 8001354:	080023dc 	.word	0x080023dc
 8001358:	20000000 	.word	0x20000000
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001376:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d007      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0x32>
 8001382:	2b08      	cmp	r3, #8
 8001384:	d008      	beq.n	8001398 <HAL_RCC_GetSysClockFreq+0x38>
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 808d 	bne.w	80014a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800138e:	60bb      	str	r3, [r7, #8]
       break;
 8001390:	e08c      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001394:	60bb      	str	r3, [r7, #8]
      break;
 8001396:	e089      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d023      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	f04f 0400 	mov.w	r4, #0
 80013b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	ea03 0501 	and.w	r5, r3, r1
 80013c4:	ea04 0602 	and.w	r6, r4, r2
 80013c8:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80013ca:	fb02 f106 	mul.w	r1, r2, r6
 80013ce:	2200      	movs	r2, #0
 80013d0:	fb02 f205 	mul.w	r2, r2, r5
 80013d4:	440a      	add	r2, r1
 80013d6:	493a      	ldr	r1, [pc, #232]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80013d8:	fba5 0101 	umull	r0, r1, r5, r1
 80013dc:	1853      	adds	r3, r2, r1
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0400 	mov.w	r4, #0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7fe ff51 	bl	8000290 <__aeabi_uldivmod>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e049      	b.n	800148a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	f04f 0400 	mov.w	r4, #0
 8001400:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	ea03 0501 	and.w	r5, r3, r1
 800140c:	ea04 0602 	and.w	r6, r4, r2
 8001410:	4629      	mov	r1, r5
 8001412:	4632      	mov	r2, r6
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f04f 0400 	mov.w	r4, #0
 800141c:	0154      	lsls	r4, r2, #5
 800141e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001422:	014b      	lsls	r3, r1, #5
 8001424:	4619      	mov	r1, r3
 8001426:	4622      	mov	r2, r4
 8001428:	1b49      	subs	r1, r1, r5
 800142a:	eb62 0206 	sbc.w	r2, r2, r6
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	f04f 0400 	mov.w	r4, #0
 8001436:	0194      	lsls	r4, r2, #6
 8001438:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800143c:	018b      	lsls	r3, r1, #6
 800143e:	1a5b      	subs	r3, r3, r1
 8001440:	eb64 0402 	sbc.w	r4, r4, r2
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	00e2      	lsls	r2, r4, #3
 800144e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001452:	00d9      	lsls	r1, r3, #3
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	195b      	adds	r3, r3, r5
 800145a:	eb44 0406 	adc.w	r4, r4, r6
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	02a2      	lsls	r2, r4, #10
 8001468:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800146c:	0299      	lsls	r1, r3, #10
 800146e:	460b      	mov	r3, r1
 8001470:	4614      	mov	r4, r2
 8001472:	4618      	mov	r0, r3
 8001474:	4621      	mov	r1, r4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	f7fe ff06 	bl	8000290 <__aeabi_uldivmod>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0c1b      	lsrs	r3, r3, #16
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	3301      	adds	r3, #1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	60bb      	str	r3, [r7, #8]
      break;
 80014a4:	e002      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80014a8:	60bb      	str	r3, [r7, #8]
      break;
 80014aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ac:	68bb      	ldr	r3, [r7, #8]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	017d7840 	.word	0x017d7840

080014c4 <lcd_init>:
 * char strtemp[15];
 * sprintf(strtemp, "TEMP=%d", temparature);
 *
 * */
void lcd_init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
		LCD4_PIN       //	PB5
		LCD5_PIN       //	PB4
		LCD6_PIN       //	PB10
		LCD7_PIN       //	PA8
	*/
	RCC->AHB1ENR |= (1<<2) | (1<<1) | (1<< 0);
 80014c8:	4b9a      	ldr	r3, [pc, #616]	; (8001734 <lcd_init+0x270>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a99      	ldr	r2, [pc, #612]	; (8001734 <lcd_init+0x270>)
 80014ce:	f043 0307 	orr.w	r3, r3, #7
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER   &= ~(1 << 2*(9) + 1);	//	A9
 80014d4:	4b98      	ldr	r3, [pc, #608]	; (8001738 <lcd_init+0x274>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a97      	ldr	r2, [pc, #604]	; (8001738 <lcd_init+0x274>)
 80014da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80014de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (1 << 2*(9) );
 80014e0:	4b95      	ldr	r3, [pc, #596]	; (8001738 <lcd_init+0x274>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a94      	ldr	r2, [pc, #592]	; (8001738 <lcd_init+0x274>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER  &= ~(1 <<   (9) );
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <lcd_init+0x274>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a91      	ldr	r2, [pc, #580]	; (8001738 <lcd_init+0x274>)
 80014f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014f6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=  (1 << (2*(9) + 1) ) |  (1 <<  2*(9) );		//	01: 25 MHz Medium speed
 80014f8:	4b8f      	ldr	r3, [pc, #572]	; (8001738 <lcd_init+0x274>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a8e      	ldr	r2, [pc, #568]	; (8001738 <lcd_init+0x274>)
 80014fe:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001502:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR   &= ~(1 << (2*(9) + 1) ) & ~(1 << (2*(9)) );
 8001504:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <lcd_init+0x274>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a8b      	ldr	r2, [pc, #556]	; (8001738 <lcd_init+0x274>)
 800150a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800150e:	60d3      	str	r3, [r2, #12]

	GPIOC->MODER   &= ~(1 <<  2*(7) + 1);	//	C7
 8001510:	4b8a      	ldr	r3, [pc, #552]	; (800173c <lcd_init+0x278>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a89      	ldr	r2, [pc, #548]	; (800173c <lcd_init+0x278>)
 8001516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800151a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER   |=  (1 <<  2*(7) );
 800151c:	4b87      	ldr	r3, [pc, #540]	; (800173c <lcd_init+0x278>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a86      	ldr	r2, [pc, #536]	; (800173c <lcd_init+0x278>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001526:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER  &= ~(1 <<   (7) );
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <lcd_init+0x278>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a83      	ldr	r2, [pc, #524]	; (800173c <lcd_init+0x278>)
 800152e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001532:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |=  (1 << (2*(7) + 1) ) |  (1 <<  2*(7) );
 8001534:	4b81      	ldr	r3, [pc, #516]	; (800173c <lcd_init+0x278>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a80      	ldr	r2, [pc, #512]	; (800173c <lcd_init+0x278>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153e:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR   &= ~(1 << (2*(7) + 1) ) & ~(1 << (2*(7)) );
 8001540:	4b7e      	ldr	r3, [pc, #504]	; (800173c <lcd_init+0x278>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a7d      	ldr	r2, [pc, #500]	; (800173c <lcd_init+0x278>)
 8001546:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800154a:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(5) + 1);	//	B5
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <lcd_init+0x27c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <lcd_init+0x27c>)
 8001552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001556:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(5) );
 8001558:	4b79      	ldr	r3, [pc, #484]	; (8001740 <lcd_init+0x27c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a78      	ldr	r2, [pc, #480]	; (8001740 <lcd_init+0x27c>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (5) );
 8001564:	4b76      	ldr	r3, [pc, #472]	; (8001740 <lcd_init+0x27c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a75      	ldr	r2, [pc, #468]	; (8001740 <lcd_init+0x27c>)
 800156a:	f023 0320 	bic.w	r3, r3, #32
 800156e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(5) + 1) ) |  (1 <<  2*(5) );
 8001570:	4b73      	ldr	r3, [pc, #460]	; (8001740 <lcd_init+0x27c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a72      	ldr	r2, [pc, #456]	; (8001740 <lcd_init+0x27c>)
 8001576:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800157a:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(5) + 1) ) & ~(1 << (2*(5)) );
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <lcd_init+0x27c>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <lcd_init+0x27c>)
 8001582:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001586:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(4) + 1);	//	B4
 8001588:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <lcd_init+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6c      	ldr	r2, [pc, #432]	; (8001740 <lcd_init+0x27c>)
 800158e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(4) );
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <lcd_init+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a69      	ldr	r2, [pc, #420]	; (8001740 <lcd_init+0x27c>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (4) );
 80015a0:	4b67      	ldr	r3, [pc, #412]	; (8001740 <lcd_init+0x27c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a66      	ldr	r2, [pc, #408]	; (8001740 <lcd_init+0x27c>)
 80015a6:	f023 0310 	bic.w	r3, r3, #16
 80015aa:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(4) + 1) ) |  (1 <<  2*(4) );
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <lcd_init+0x27c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a63      	ldr	r2, [pc, #396]	; (8001740 <lcd_init+0x27c>)
 80015b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015b6:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(4) + 1) ) & ~(1 << (2*(4)) );
 80015b8:	4b61      	ldr	r3, [pc, #388]	; (8001740 <lcd_init+0x27c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a60      	ldr	r2, [pc, #384]	; (8001740 <lcd_init+0x27c>)
 80015be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015c2:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(10) + 1);	//	B10
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <lcd_init+0x27c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5d      	ldr	r2, [pc, #372]	; (8001740 <lcd_init+0x27c>)
 80015ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(10) );
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <lcd_init+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <lcd_init+0x27c>)
 80015d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (10) );
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <lcd_init+0x27c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <lcd_init+0x27c>)
 80015e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015e6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(10) + 1) ) |  (1 <<  2*(10) );
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <lcd_init+0x27c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a54      	ldr	r2, [pc, #336]	; (8001740 <lcd_init+0x27c>)
 80015ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80015f2:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(10) + 1) ) & ~(1 << (2*(10)) );
 80015f4:	4b52      	ldr	r3, [pc, #328]	; (8001740 <lcd_init+0x27c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a51      	ldr	r2, [pc, #324]	; (8001740 <lcd_init+0x27c>)
 80015fa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015fe:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER   &= ~(1 <<  2*(8) + 1);	//	A8
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <lcd_init+0x274>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <lcd_init+0x274>)
 8001606:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800160a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (1 <<  2*(8) );
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <lcd_init+0x274>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a49      	ldr	r2, [pc, #292]	; (8001738 <lcd_init+0x274>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER  &= ~(1 <<    (8) );
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <lcd_init+0x274>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a46      	ldr	r2, [pc, #280]	; (8001738 <lcd_init+0x274>)
 800161e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001622:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=  (1 << (2*(8) + 1) ) |  (1 <<  2*(8) );
 8001624:	4b44      	ldr	r3, [pc, #272]	; (8001738 <lcd_init+0x274>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <lcd_init+0x274>)
 800162a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800162e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR   &= ~(1 << (2*(8) + 1) ) & ~(1 << (2*(8)) );
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <lcd_init+0x274>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <lcd_init+0x274>)
 8001636:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800163a:	60d3      	str	r3, [r2, #12]

	HAL_Delay(15);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff fa31 	bl	8000aa4 <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <lcd_init+0x274>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a3c      	ldr	r2, [pc, #240]	; (8001738 <lcd_init+0x274>)
 8001648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <lcd_init+0x27c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <lcd_init+0x27c>)
 8001654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001658:	6193      	str	r3, [r2, #24]
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <lcd_init+0x27c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <lcd_init+0x27c>)
 8001660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <lcd_init+0x27c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a35      	ldr	r2, [pc, #212]	; (8001740 <lcd_init+0x27c>)
 800166c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001670:	6193      	str	r3, [r2, #24]
	LCDE_OFF;
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <lcd_init+0x278>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a31      	ldr	r2, [pc, #196]	; (800173c <lcd_init+0x278>)
 8001678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800167c:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <lcd_init+0x274>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <lcd_init+0x274>)
 8001684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001688:	6193      	str	r3, [r2, #24]
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <lcd_init+0x274>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <lcd_init+0x274>)
 8001690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <lcd_init+0x27c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <lcd_init+0x27c>)
 800169c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <lcd_init+0x27c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a26      	ldr	r2, [pc, #152]	; (8001740 <lcd_init+0x27c>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <lcd_init+0x27c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <lcd_init+0x27c>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <lcd_init+0x278>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <lcd_init+0x278>)
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <lcd_init+0x274>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <lcd_init+0x274>)
 80016cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d0:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f7ff f9e6 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <lcd_init+0x278>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a17      	ldr	r2, [pc, #92]	; (800173c <lcd_init+0x278>)
 80016de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e2:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80016e4:	200a      	movs	r0, #10
 80016e6:	f7ff f9dd 	bl	8000aa4 <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <lcd_init+0x274>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <lcd_init+0x274>)
 80016f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <lcd_init+0x27c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a11      	ldr	r2, [pc, #68]	; (8001740 <lcd_init+0x27c>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <lcd_init+0x27c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <lcd_init+0x27c>)
 8001708:	f043 0310 	orr.w	r3, r3, #16
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <lcd_init+0x27c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <lcd_init+0x27c>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <lcd_init+0x278>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <lcd_init+0x278>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <lcd_init+0x274>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <lcd_init+0x274>)
 800172c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001730:	e008      	b.n	8001744 <lcd_init+0x280>
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020800 	.word	0x40020800
 8001740:	40020400 	.word	0x40020400
 8001744:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f7ff f9ac 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <lcd_init+0x310>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <lcd_init+0x310>)
 8001752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001756:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 8001758:	200a      	movs	r0, #10
 800175a:	f7ff f9a3 	bl	8000aa4 <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <lcd_init+0x314>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <lcd_init+0x314>)
 8001764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001768:	6193      	str	r3, [r2, #24]
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <lcd_init+0x318>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <lcd_init+0x318>)
 8001770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <lcd_init+0x318>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <lcd_init+0x318>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <lcd_init+0x318>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <lcd_init+0x318>)
 8001788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178c:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <lcd_init+0x310>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <lcd_init+0x310>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <lcd_init+0x314>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <lcd_init+0x314>)
 80017a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a4:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80017a6:	200a      	movs	r0, #10
 80017a8:	f7ff f97c 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <lcd_init+0x310>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <lcd_init+0x310>)
 80017b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017b6:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f7ff f973 	bl	8000aa4 <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 80017be:	2028      	movs	r0, #40	; 0x28
 80017c0:	f000 f8d6 	bl	8001970 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 80017c4:	200c      	movs	r0, #12
 80017c6:	f000 f8d3 	bl	8001970 <lcd_command>
	//-----Clear display
	lcd_clear();
 80017ca:	f000 f9b3 	bl	8001b34 <lcd_clear>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400

080017e0 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 80017ea:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <lcd_putc+0x184>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <lcd_putc+0x184>)
 80017f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f4:	6193      	str	r3, [r2, #24]

  if ( ch & 0x10 ) {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <lcd_putc+0x2e>
		LCD4_ON;
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <lcd_putc+0x188>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <lcd_putc+0x188>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	e005      	b.n	800181a <lcd_putc+0x3a>
	} else {
		LCD4_OFF;
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <lcd_putc+0x188>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a55      	ldr	r2, [pc, #340]	; (8001968 <lcd_putc+0x188>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x20 ) {
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <lcd_putc+0x52>
		LCD5_ON;
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <lcd_putc+0x188>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <lcd_putc+0x188>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	e005      	b.n	800183e <lcd_putc+0x5e>
	} else {
    LCD5_OFF;
 8001832:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <lcd_putc+0x188>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <lcd_putc+0x188>)
 8001838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800183c:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x40 ) {
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <lcd_putc+0x76>
		LCD6_ON;
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <lcd_putc+0x188>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a46      	ldr	r2, [pc, #280]	; (8001968 <lcd_putc+0x188>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	e005      	b.n	8001862 <lcd_putc+0x82>
	} else {
		LCD6_OFF;
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <lcd_putc+0x188>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a43      	ldr	r2, [pc, #268]	; (8001968 <lcd_putc+0x188>)
 800185c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001860:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x80 ) {
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	da06      	bge.n	8001878 <lcd_putc+0x98>
		LCD7_ON;
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <lcd_putc+0x184>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <lcd_putc+0x184>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6193      	str	r3, [r2, #24]
 8001876:	e005      	b.n	8001884 <lcd_putc+0xa4>
	} else {
		LCD7_OFF;
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <lcd_putc+0x184>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a39      	ldr	r2, [pc, #228]	; (8001964 <lcd_putc+0x184>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <lcd_putc+0x18c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a38      	ldr	r2, [pc, #224]	; (800196c <lcd_putc+0x18c>)
 800188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188e:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff f907 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <lcd_putc+0x18c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <lcd_putc+0x18c>)
 800189c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018a0:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 80018a2:	2002      	movs	r0, #2
 80018a4:	f7ff f8fe 	bl	8000aa4 <HAL_Delay>

	if ( ch & 0x01 ) {
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <lcd_putc+0xe0>
		LCD4_ON;
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <lcd_putc+0x188>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <lcd_putc+0x188>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	e005      	b.n	80018cc <lcd_putc+0xec>
	} else {
		LCD4_OFF;
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <lcd_putc+0x188>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <lcd_putc+0x188>)
 80018c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ca:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x02 ) {
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <lcd_putc+0x104>
		LCD5_ON;
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <lcd_putc+0x188>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <lcd_putc+0x188>)
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	e005      	b.n	80018f0 <lcd_putc+0x110>
	} else {
    LCD5_OFF;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <lcd_putc+0x188>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <lcd_putc+0x188>)
 80018ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ee:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x04 ) {
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <lcd_putc+0x128>
		LCD6_ON;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <lcd_putc+0x188>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <lcd_putc+0x188>)
 8001900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	e005      	b.n	8001914 <lcd_putc+0x134>
	} else {
    LCD6_OFF;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <lcd_putc+0x188>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <lcd_putc+0x188>)
 800190e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001912:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x08 ) {
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <lcd_putc+0x14c>
		LCD7_ON;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <lcd_putc+0x184>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <lcd_putc+0x184>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6193      	str	r3, [r2, #24]
 800192a:	e005      	b.n	8001938 <lcd_putc+0x158>
	} else {
    LCD7_OFF;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <lcd_putc+0x184>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <lcd_putc+0x184>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <lcd_putc+0x18c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <lcd_putc+0x18c>)
 800193e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001942:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff f8ad 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <lcd_putc+0x18c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <lcd_putc+0x18c>)
 8001950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001954:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001956:	2002      	movs	r0, #2
 8001958:	f7ff f8a4 	bl	8000aa4 <HAL_Delay>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800

08001970 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 800197a:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <lcd_command+0x184>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <lcd_command+0x184>)
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001984:	6193      	str	r3, [r2, #24]

	if ( cmd & 0x10 ) {
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <lcd_command+0x2e>
		LCD4_ON;
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <lcd_command+0x188>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <lcd_command+0x188>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	e005      	b.n	80019aa <lcd_command+0x3a>
	} else {
		LCD4_OFF;
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <lcd_command+0x188>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <lcd_command+0x188>)
 80019a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a8:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x20 ) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <lcd_command+0x52>
		LCD5_ON;
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <lcd_command+0x188>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <lcd_command+0x188>)
 80019ba:	f043 0310 	orr.w	r3, r3, #16
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	e005      	b.n	80019ce <lcd_command+0x5e>
	} else {
		LCD5_OFF;
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <lcd_command+0x188>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <lcd_command+0x188>)
 80019c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019cc:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x40 ) {
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <lcd_command+0x76>
		LCD6_ON;
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <lcd_command+0x188>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <lcd_command+0x188>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	e005      	b.n	80019f2 <lcd_command+0x82>
	} else {
		LCD6_OFF;
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <lcd_command+0x188>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <lcd_command+0x188>)
 80019ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019f0:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x80 ) {
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da06      	bge.n	8001a08 <lcd_command+0x98>
		LCD7_ON;
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <lcd_command+0x184>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <lcd_command+0x184>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	e005      	b.n	8001a14 <lcd_command+0xa4>
	} else {
		LCD7_OFF;
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <lcd_command+0x184>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <lcd_command+0x184>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <lcd_command+0x18c>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a38      	ldr	r2, [pc, #224]	; (8001afc <lcd_command+0x18c>)
 8001a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1e:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff f83f 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <lcd_command+0x18c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	4a34      	ldr	r2, [pc, #208]	; (8001afc <lcd_command+0x18c>)
 8001a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a30:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff f836 	bl	8000aa4 <HAL_Delay>

	if ( cmd & 0x01 ) {
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <lcd_command+0xe0>
		LCD4_ON;
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <lcd_command+0x188>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <lcd_command+0x188>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	e005      	b.n	8001a5c <lcd_command+0xec>
	} else {
		LCD4_OFF;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <lcd_command+0x188>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <lcd_command+0x188>)
 8001a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5a:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x02 ) {
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <lcd_command+0x104>
		LCD5_ON;
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <lcd_command+0x188>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <lcd_command+0x188>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	e005      	b.n	8001a80 <lcd_command+0x110>
	} else {
		LCD5_OFF;
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <lcd_command+0x188>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <lcd_command+0x188>)
 8001a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a7e:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x04 ) {
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <lcd_command+0x128>
		LCD6_ON;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <lcd_command+0x188>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <lcd_command+0x188>)
 8001a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	e005      	b.n	8001aa4 <lcd_command+0x134>
	} else {
		LCD6_OFF;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <lcd_command+0x188>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <lcd_command+0x188>)
 8001a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x08 ) {
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <lcd_command+0x14c>
		LCD7_ON;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <lcd_command+0x184>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <lcd_command+0x184>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	e005      	b.n	8001ac8 <lcd_command+0x158>
	} else {
		LCD7_OFF;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <lcd_command+0x184>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <lcd_command+0x184>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <lcd_command+0x18c>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <lcd_command+0x18c>)
 8001ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad2:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7fe ffe5 	bl	8000aa4 <HAL_Delay>
	LCDE_OFF;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <lcd_command+0x18c>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <lcd_command+0x18c>)
 8001ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae4:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7fe ffdc 	bl	8000aa4 <HAL_Delay>

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800

08001b00 <lcd_puts>:

void lcd_puts(char* data, unsigned char nBytes){	//Outputs string to LCD
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
	register unsigned char i=0;
 8001b0c:	2400      	movs	r4, #0

	for(i=0; i<nBytes; i++){	// print data
 8001b0e:	2400      	movs	r4, #0
 8001b10:	e009      	b.n	8001b26 <lcd_puts+0x26>
		lcd_putc(data[i]);
 8001b12:	4622      	mov	r2, r4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe60 	bl	80017e0 <lcd_putc>
	for(i=0; i<nBytes; i++){	// print data
 8001b20:	4623      	mov	r3, r4
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2dc      	uxtb	r4, r3
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	42a3      	cmp	r3, r4
 8001b2a:	d8f2      	bhi.n	8001b12 <lcd_puts+0x12>
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}

08001b34 <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff ff19 	bl	8001970 <lcd_command>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <__errno>:
 8001b44:	4b01      	ldr	r3, [pc, #4]	; (8001b4c <__errno+0x8>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <__libc_init_array>:
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	4e0d      	ldr	r6, [pc, #52]	; (8001b88 <__libc_init_array+0x38>)
 8001b54:	4c0d      	ldr	r4, [pc, #52]	; (8001b8c <__libc_init_array+0x3c>)
 8001b56:	1ba4      	subs	r4, r4, r6
 8001b58:	10a4      	asrs	r4, r4, #2
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	42a5      	cmp	r5, r4
 8001b5e:	d109      	bne.n	8001b74 <__libc_init_array+0x24>
 8001b60:	4e0b      	ldr	r6, [pc, #44]	; (8001b90 <__libc_init_array+0x40>)
 8001b62:	4c0c      	ldr	r4, [pc, #48]	; (8001b94 <__libc_init_array+0x44>)
 8001b64:	f000 fc26 	bl	80023b4 <_init>
 8001b68:	1ba4      	subs	r4, r4, r6
 8001b6a:	10a4      	asrs	r4, r4, #2
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	42a5      	cmp	r5, r4
 8001b70:	d105      	bne.n	8001b7e <__libc_init_array+0x2e>
 8001b72:	bd70      	pop	{r4, r5, r6, pc}
 8001b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b78:	4798      	blx	r3
 8001b7a:	3501      	adds	r5, #1
 8001b7c:	e7ee      	b.n	8001b5c <__libc_init_array+0xc>
 8001b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b82:	4798      	blx	r3
 8001b84:	3501      	adds	r5, #1
 8001b86:	e7f2      	b.n	8001b6e <__libc_init_array+0x1e>
 8001b88:	08002428 	.word	0x08002428
 8001b8c:	08002428 	.word	0x08002428
 8001b90:	08002428 	.word	0x08002428
 8001b94:	0800242c 	.word	0x0800242c

08001b98 <memset>:
 8001b98:	4402      	add	r2, r0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d100      	bne.n	8001ba2 <memset+0xa>
 8001ba0:	4770      	bx	lr
 8001ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ba6:	e7f9      	b.n	8001b9c <memset+0x4>

08001ba8 <siprintf>:
 8001ba8:	b40e      	push	{r1, r2, r3}
 8001baa:	b500      	push	{lr}
 8001bac:	b09c      	sub	sp, #112	; 0x70
 8001bae:	ab1d      	add	r3, sp, #116	; 0x74
 8001bb0:	9002      	str	r0, [sp, #8]
 8001bb2:	9006      	str	r0, [sp, #24]
 8001bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bb8:	4809      	ldr	r0, [pc, #36]	; (8001be0 <siprintf+0x38>)
 8001bba:	9107      	str	r1, [sp, #28]
 8001bbc:	9104      	str	r1, [sp, #16]
 8001bbe:	4909      	ldr	r1, [pc, #36]	; (8001be4 <siprintf+0x3c>)
 8001bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bc4:	9105      	str	r1, [sp, #20]
 8001bc6:	6800      	ldr	r0, [r0, #0]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	a902      	add	r1, sp, #8
 8001bcc:	f000 f866 	bl	8001c9c <_svfiprintf_r>
 8001bd0:	9b02      	ldr	r3, [sp, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	b01c      	add	sp, #112	; 0x70
 8001bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bdc:	b003      	add	sp, #12
 8001bde:	4770      	bx	lr
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	ffff0208 	.word	0xffff0208

08001be8 <__ssputs_r>:
 8001be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bec:	688e      	ldr	r6, [r1, #8]
 8001bee:	429e      	cmp	r6, r3
 8001bf0:	4682      	mov	sl, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4690      	mov	r8, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	d837      	bhi.n	8001c6a <__ssputs_r+0x82>
 8001bfa:	898a      	ldrh	r2, [r1, #12]
 8001bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c00:	d031      	beq.n	8001c66 <__ssputs_r+0x7e>
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	6909      	ldr	r1, [r1, #16]
 8001c06:	1a6f      	subs	r7, r5, r1
 8001c08:	6965      	ldr	r5, [r4, #20]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c14:	f109 0301 	add.w	r3, r9, #1
 8001c18:	443b      	add	r3, r7
 8001c1a:	429d      	cmp	r5, r3
 8001c1c:	bf38      	it	cc
 8001c1e:	461d      	movcc	r5, r3
 8001c20:	0553      	lsls	r3, r2, #21
 8001c22:	d530      	bpl.n	8001c86 <__ssputs_r+0x9e>
 8001c24:	4629      	mov	r1, r5
 8001c26:	f000 fb2b 	bl	8002280 <_malloc_r>
 8001c2a:	4606      	mov	r6, r0
 8001c2c:	b950      	cbnz	r0, 8001c44 <__ssputs_r+0x5c>
 8001c2e:	230c      	movs	r3, #12
 8001c30:	f8ca 3000 	str.w	r3, [sl]
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3a:	81a3      	strh	r3, [r4, #12]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c44:	463a      	mov	r2, r7
 8001c46:	6921      	ldr	r1, [r4, #16]
 8001c48:	f000 faa8 	bl	800219c <memcpy>
 8001c4c:	89a3      	ldrh	r3, [r4, #12]
 8001c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	81a3      	strh	r3, [r4, #12]
 8001c58:	6126      	str	r6, [r4, #16]
 8001c5a:	6165      	str	r5, [r4, #20]
 8001c5c:	443e      	add	r6, r7
 8001c5e:	1bed      	subs	r5, r5, r7
 8001c60:	6026      	str	r6, [r4, #0]
 8001c62:	60a5      	str	r5, [r4, #8]
 8001c64:	464e      	mov	r6, r9
 8001c66:	454e      	cmp	r6, r9
 8001c68:	d900      	bls.n	8001c6c <__ssputs_r+0x84>
 8001c6a:	464e      	mov	r6, r9
 8001c6c:	4632      	mov	r2, r6
 8001c6e:	4641      	mov	r1, r8
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	f000 fa9e 	bl	80021b2 <memmove>
 8001c76:	68a3      	ldr	r3, [r4, #8]
 8001c78:	1b9b      	subs	r3, r3, r6
 8001c7a:	60a3      	str	r3, [r4, #8]
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	441e      	add	r6, r3
 8001c80:	6026      	str	r6, [r4, #0]
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7dc      	b.n	8001c40 <__ssputs_r+0x58>
 8001c86:	462a      	mov	r2, r5
 8001c88:	f000 fb54 	bl	8002334 <_realloc_r>
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d1e2      	bne.n	8001c58 <__ssputs_r+0x70>
 8001c92:	6921      	ldr	r1, [r4, #16]
 8001c94:	4650      	mov	r0, sl
 8001c96:	f000 faa5 	bl	80021e4 <_free_r>
 8001c9a:	e7c8      	b.n	8001c2e <__ssputs_r+0x46>

08001c9c <_svfiprintf_r>:
 8001c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	898b      	ldrh	r3, [r1, #12]
 8001ca4:	061f      	lsls	r7, r3, #24
 8001ca6:	b09d      	sub	sp, #116	; 0x74
 8001ca8:	4680      	mov	r8, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4616      	mov	r6, r2
 8001cae:	d50f      	bpl.n	8001cd0 <_svfiprintf_r+0x34>
 8001cb0:	690b      	ldr	r3, [r1, #16]
 8001cb2:	b96b      	cbnz	r3, 8001cd0 <_svfiprintf_r+0x34>
 8001cb4:	2140      	movs	r1, #64	; 0x40
 8001cb6:	f000 fae3 	bl	8002280 <_malloc_r>
 8001cba:	6020      	str	r0, [r4, #0]
 8001cbc:	6120      	str	r0, [r4, #16]
 8001cbe:	b928      	cbnz	r0, 8001ccc <_svfiprintf_r+0x30>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	f8c8 3000 	str.w	r3, [r8]
 8001cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cca:	e0c8      	b.n	8001e5e <_svfiprintf_r+0x1c2>
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	6163      	str	r3, [r4, #20]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cda:	2330      	movs	r3, #48	; 0x30
 8001cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ce0:	9503      	str	r5, [sp, #12]
 8001ce2:	f04f 0b01 	mov.w	fp, #1
 8001ce6:	4637      	mov	r7, r6
 8001ce8:	463d      	mov	r5, r7
 8001cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cee:	b10b      	cbz	r3, 8001cf4 <_svfiprintf_r+0x58>
 8001cf0:	2b25      	cmp	r3, #37	; 0x25
 8001cf2:	d13e      	bne.n	8001d72 <_svfiprintf_r+0xd6>
 8001cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cf8:	d00b      	beq.n	8001d12 <_svfiprintf_r+0x76>
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	4621      	mov	r1, r4
 8001d00:	4640      	mov	r0, r8
 8001d02:	f7ff ff71 	bl	8001be8 <__ssputs_r>
 8001d06:	3001      	adds	r0, #1
 8001d08:	f000 80a4 	beq.w	8001e54 <_svfiprintf_r+0x1b8>
 8001d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d0e:	4453      	add	r3, sl
 8001d10:	9309      	str	r3, [sp, #36]	; 0x24
 8001d12:	783b      	ldrb	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 809d 	beq.w	8001e54 <_svfiprintf_r+0x1b8>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d24:	9304      	str	r3, [sp, #16]
 8001d26:	9307      	str	r3, [sp, #28]
 8001d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8001d2e:	462f      	mov	r7, r5
 8001d30:	2205      	movs	r2, #5
 8001d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <_svfiprintf_r+0x1dc>)
 8001d38:	f7fe fa5a 	bl	80001f0 <memchr>
 8001d3c:	9b04      	ldr	r3, [sp, #16]
 8001d3e:	b9d0      	cbnz	r0, 8001d76 <_svfiprintf_r+0xda>
 8001d40:	06d9      	lsls	r1, r3, #27
 8001d42:	bf44      	itt	mi
 8001d44:	2220      	movmi	r2, #32
 8001d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d4a:	071a      	lsls	r2, r3, #28
 8001d4c:	bf44      	itt	mi
 8001d4e:	222b      	movmi	r2, #43	; 0x2b
 8001d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d54:	782a      	ldrb	r2, [r5, #0]
 8001d56:	2a2a      	cmp	r2, #42	; 0x2a
 8001d58:	d015      	beq.n	8001d86 <_svfiprintf_r+0xea>
 8001d5a:	9a07      	ldr	r2, [sp, #28]
 8001d5c:	462f      	mov	r7, r5
 8001d5e:	2000      	movs	r0, #0
 8001d60:	250a      	movs	r5, #10
 8001d62:	4639      	mov	r1, r7
 8001d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d68:	3b30      	subs	r3, #48	; 0x30
 8001d6a:	2b09      	cmp	r3, #9
 8001d6c:	d94d      	bls.n	8001e0a <_svfiprintf_r+0x16e>
 8001d6e:	b1b8      	cbz	r0, 8001da0 <_svfiprintf_r+0x104>
 8001d70:	e00f      	b.n	8001d92 <_svfiprintf_r+0xf6>
 8001d72:	462f      	mov	r7, r5
 8001d74:	e7b8      	b.n	8001ce8 <_svfiprintf_r+0x4c>
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <_svfiprintf_r+0x1dc>)
 8001d78:	1a80      	subs	r0, r0, r2
 8001d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8001d7e:	4318      	orrs	r0, r3
 8001d80:	9004      	str	r0, [sp, #16]
 8001d82:	463d      	mov	r5, r7
 8001d84:	e7d3      	b.n	8001d2e <_svfiprintf_r+0x92>
 8001d86:	9a03      	ldr	r2, [sp, #12]
 8001d88:	1d11      	adds	r1, r2, #4
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	9103      	str	r1, [sp, #12]
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	db01      	blt.n	8001d96 <_svfiprintf_r+0xfa>
 8001d92:	9207      	str	r2, [sp, #28]
 8001d94:	e004      	b.n	8001da0 <_svfiprintf_r+0x104>
 8001d96:	4252      	negs	r2, r2
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	9207      	str	r2, [sp, #28]
 8001d9e:	9304      	str	r3, [sp, #16]
 8001da0:	783b      	ldrb	r3, [r7, #0]
 8001da2:	2b2e      	cmp	r3, #46	; 0x2e
 8001da4:	d10c      	bne.n	8001dc0 <_svfiprintf_r+0x124>
 8001da6:	787b      	ldrb	r3, [r7, #1]
 8001da8:	2b2a      	cmp	r3, #42	; 0x2a
 8001daa:	d133      	bne.n	8001e14 <_svfiprintf_r+0x178>
 8001dac:	9b03      	ldr	r3, [sp, #12]
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	9203      	str	r2, [sp, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bfb8      	it	lt
 8001db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dbc:	3702      	adds	r7, #2
 8001dbe:	9305      	str	r3, [sp, #20]
 8001dc0:	4d2e      	ldr	r5, [pc, #184]	; (8001e7c <_svfiprintf_r+0x1e0>)
 8001dc2:	7839      	ldrb	r1, [r7, #0]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7fe fa12 	bl	80001f0 <memchr>
 8001dcc:	b138      	cbz	r0, 8001dde <_svfiprintf_r+0x142>
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	1b40      	subs	r0, r0, r5
 8001dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8001dd6:	9b04      	ldr	r3, [sp, #16]
 8001dd8:	4303      	orrs	r3, r0
 8001dda:	3701      	adds	r7, #1
 8001ddc:	9304      	str	r3, [sp, #16]
 8001dde:	7839      	ldrb	r1, [r7, #0]
 8001de0:	4827      	ldr	r0, [pc, #156]	; (8001e80 <_svfiprintf_r+0x1e4>)
 8001de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001de6:	2206      	movs	r2, #6
 8001de8:	1c7e      	adds	r6, r7, #1
 8001dea:	f7fe fa01 	bl	80001f0 <memchr>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d038      	beq.n	8001e64 <_svfiprintf_r+0x1c8>
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <_svfiprintf_r+0x1e8>)
 8001df4:	bb13      	cbnz	r3, 8001e3c <_svfiprintf_r+0x1a0>
 8001df6:	9b03      	ldr	r3, [sp, #12]
 8001df8:	3307      	adds	r3, #7
 8001dfa:	f023 0307 	bic.w	r3, r3, #7
 8001dfe:	3308      	adds	r3, #8
 8001e00:	9303      	str	r3, [sp, #12]
 8001e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e04:	444b      	add	r3, r9
 8001e06:	9309      	str	r3, [sp, #36]	; 0x24
 8001e08:	e76d      	b.n	8001ce6 <_svfiprintf_r+0x4a>
 8001e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8001e0e:	2001      	movs	r0, #1
 8001e10:	460f      	mov	r7, r1
 8001e12:	e7a6      	b.n	8001d62 <_svfiprintf_r+0xc6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	3701      	adds	r7, #1
 8001e18:	9305      	str	r3, [sp, #20]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	250a      	movs	r5, #10
 8001e1e:	4638      	mov	r0, r7
 8001e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e24:	3a30      	subs	r2, #48	; 0x30
 8001e26:	2a09      	cmp	r2, #9
 8001e28:	d903      	bls.n	8001e32 <_svfiprintf_r+0x196>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0c8      	beq.n	8001dc0 <_svfiprintf_r+0x124>
 8001e2e:	9105      	str	r1, [sp, #20]
 8001e30:	e7c6      	b.n	8001dc0 <_svfiprintf_r+0x124>
 8001e32:	fb05 2101 	mla	r1, r5, r1, r2
 8001e36:	2301      	movs	r3, #1
 8001e38:	4607      	mov	r7, r0
 8001e3a:	e7f0      	b.n	8001e1e <_svfiprintf_r+0x182>
 8001e3c:	ab03      	add	r3, sp, #12
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4622      	mov	r2, r4
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <_svfiprintf_r+0x1ec>)
 8001e44:	a904      	add	r1, sp, #16
 8001e46:	4640      	mov	r0, r8
 8001e48:	f3af 8000 	nop.w
 8001e4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e50:	4681      	mov	r9, r0
 8001e52:	d1d6      	bne.n	8001e02 <_svfiprintf_r+0x166>
 8001e54:	89a3      	ldrh	r3, [r4, #12]
 8001e56:	065b      	lsls	r3, r3, #25
 8001e58:	f53f af35 	bmi.w	8001cc6 <_svfiprintf_r+0x2a>
 8001e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5e:	b01d      	add	sp, #116	; 0x74
 8001e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e64:	ab03      	add	r3, sp, #12
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4622      	mov	r2, r4
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <_svfiprintf_r+0x1ec>)
 8001e6c:	a904      	add	r1, sp, #16
 8001e6e:	4640      	mov	r0, r8
 8001e70:	f000 f882 	bl	8001f78 <_printf_i>
 8001e74:	e7ea      	b.n	8001e4c <_svfiprintf_r+0x1b0>
 8001e76:	bf00      	nop
 8001e78:	080023ec 	.word	0x080023ec
 8001e7c:	080023f2 	.word	0x080023f2
 8001e80:	080023f6 	.word	0x080023f6
 8001e84:	00000000 	.word	0x00000000
 8001e88:	08001be9 	.word	0x08001be9

08001e8c <_printf_common>:
 8001e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e90:	4691      	mov	r9, r2
 8001e92:	461f      	mov	r7, r3
 8001e94:	688a      	ldr	r2, [r1, #8]
 8001e96:	690b      	ldr	r3, [r1, #16]
 8001e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	bfb8      	it	lt
 8001ea0:	4613      	movlt	r3, r2
 8001ea2:	f8c9 3000 	str.w	r3, [r9]
 8001ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eaa:	4606      	mov	r6, r0
 8001eac:	460c      	mov	r4, r1
 8001eae:	b112      	cbz	r2, 8001eb6 <_printf_common+0x2a>
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c9 3000 	str.w	r3, [r9]
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	0699      	lsls	r1, r3, #26
 8001eba:	bf42      	ittt	mi
 8001ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ec0:	3302      	addmi	r3, #2
 8001ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8001ec6:	6825      	ldr	r5, [r4, #0]
 8001ec8:	f015 0506 	ands.w	r5, r5, #6
 8001ecc:	d107      	bne.n	8001ede <_printf_common+0x52>
 8001ece:	f104 0a19 	add.w	sl, r4, #25
 8001ed2:	68e3      	ldr	r3, [r4, #12]
 8001ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	42ab      	cmp	r3, r5
 8001edc:	dc28      	bgt.n	8001f30 <_printf_common+0xa4>
 8001ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	3300      	adds	r3, #0
 8001ee6:	bf18      	it	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	0692      	lsls	r2, r2, #26
 8001eec:	d42d      	bmi.n	8001f4a <_printf_common+0xbe>
 8001eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	47c0      	blx	r8
 8001ef8:	3001      	adds	r0, #1
 8001efa:	d020      	beq.n	8001f3e <_printf_common+0xb2>
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	68e5      	ldr	r5, [r4, #12]
 8001f00:	f8d9 2000 	ldr.w	r2, [r9]
 8001f04:	f003 0306 	and.w	r3, r3, #6
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	bf08      	it	eq
 8001f0c:	1aad      	subeq	r5, r5, r2
 8001f0e:	68a3      	ldr	r3, [r4, #8]
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	bf0c      	ite	eq
 8001f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f18:	2500      	movne	r5, #0
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	bfc4      	itt	gt
 8001f1e:	1a9b      	subgt	r3, r3, r2
 8001f20:	18ed      	addgt	r5, r5, r3
 8001f22:	f04f 0900 	mov.w	r9, #0
 8001f26:	341a      	adds	r4, #26
 8001f28:	454d      	cmp	r5, r9
 8001f2a:	d11a      	bne.n	8001f62 <_printf_common+0xd6>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e008      	b.n	8001f42 <_printf_common+0xb6>
 8001f30:	2301      	movs	r3, #1
 8001f32:	4652      	mov	r2, sl
 8001f34:	4639      	mov	r1, r7
 8001f36:	4630      	mov	r0, r6
 8001f38:	47c0      	blx	r8
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	d103      	bne.n	8001f46 <_printf_common+0xba>
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f46:	3501      	adds	r5, #1
 8001f48:	e7c3      	b.n	8001ed2 <_printf_common+0x46>
 8001f4a:	18e1      	adds	r1, r4, r3
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	2030      	movs	r0, #48	; 0x30
 8001f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f54:	4422      	add	r2, r4
 8001f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f5e:	3302      	adds	r3, #2
 8001f60:	e7c5      	b.n	8001eee <_printf_common+0x62>
 8001f62:	2301      	movs	r3, #1
 8001f64:	4622      	mov	r2, r4
 8001f66:	4639      	mov	r1, r7
 8001f68:	4630      	mov	r0, r6
 8001f6a:	47c0      	blx	r8
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	d0e6      	beq.n	8001f3e <_printf_common+0xb2>
 8001f70:	f109 0901 	add.w	r9, r9, #1
 8001f74:	e7d8      	b.n	8001f28 <_printf_common+0x9c>
	...

08001f78 <_printf_i>:
 8001f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f80:	460c      	mov	r4, r1
 8001f82:	7e09      	ldrb	r1, [r1, #24]
 8001f84:	b085      	sub	sp, #20
 8001f86:	296e      	cmp	r1, #110	; 0x6e
 8001f88:	4617      	mov	r7, r2
 8001f8a:	4606      	mov	r6, r0
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f90:	f000 80b3 	beq.w	80020fa <_printf_i+0x182>
 8001f94:	d822      	bhi.n	8001fdc <_printf_i+0x64>
 8001f96:	2963      	cmp	r1, #99	; 0x63
 8001f98:	d036      	beq.n	8002008 <_printf_i+0x90>
 8001f9a:	d80a      	bhi.n	8001fb2 <_printf_i+0x3a>
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	f000 80b9 	beq.w	8002114 <_printf_i+0x19c>
 8001fa2:	2958      	cmp	r1, #88	; 0x58
 8001fa4:	f000 8083 	beq.w	80020ae <_printf_i+0x136>
 8001fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fb0:	e032      	b.n	8002018 <_printf_i+0xa0>
 8001fb2:	2964      	cmp	r1, #100	; 0x64
 8001fb4:	d001      	beq.n	8001fba <_printf_i+0x42>
 8001fb6:	2969      	cmp	r1, #105	; 0x69
 8001fb8:	d1f6      	bne.n	8001fa8 <_printf_i+0x30>
 8001fba:	6820      	ldr	r0, [r4, #0]
 8001fbc:	6813      	ldr	r3, [r2, #0]
 8001fbe:	0605      	lsls	r5, r0, #24
 8001fc0:	f103 0104 	add.w	r1, r3, #4
 8001fc4:	d52a      	bpl.n	800201c <_printf_i+0xa4>
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6011      	str	r1, [r2, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da03      	bge.n	8001fd6 <_printf_i+0x5e>
 8001fce:	222d      	movs	r2, #45	; 0x2d
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fd6:	486f      	ldr	r0, [pc, #444]	; (8002194 <_printf_i+0x21c>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	e039      	b.n	8002050 <_printf_i+0xd8>
 8001fdc:	2973      	cmp	r1, #115	; 0x73
 8001fde:	f000 809d 	beq.w	800211c <_printf_i+0x1a4>
 8001fe2:	d808      	bhi.n	8001ff6 <_printf_i+0x7e>
 8001fe4:	296f      	cmp	r1, #111	; 0x6f
 8001fe6:	d020      	beq.n	800202a <_printf_i+0xb2>
 8001fe8:	2970      	cmp	r1, #112	; 0x70
 8001fea:	d1dd      	bne.n	8001fa8 <_printf_i+0x30>
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6023      	str	r3, [r4, #0]
 8001ff4:	e003      	b.n	8001ffe <_printf_i+0x86>
 8001ff6:	2975      	cmp	r1, #117	; 0x75
 8001ff8:	d017      	beq.n	800202a <_printf_i+0xb2>
 8001ffa:	2978      	cmp	r1, #120	; 0x78
 8001ffc:	d1d4      	bne.n	8001fa8 <_printf_i+0x30>
 8001ffe:	2378      	movs	r3, #120	; 0x78
 8002000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002004:	4864      	ldr	r0, [pc, #400]	; (8002198 <_printf_i+0x220>)
 8002006:	e055      	b.n	80020b4 <_printf_i+0x13c>
 8002008:	6813      	ldr	r3, [r2, #0]
 800200a:	1d19      	adds	r1, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6011      	str	r1, [r2, #0]
 8002010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002018:	2301      	movs	r3, #1
 800201a:	e08c      	b.n	8002136 <_printf_i+0x1be>
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6011      	str	r1, [r2, #0]
 8002020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002024:	bf18      	it	ne
 8002026:	b21b      	sxthne	r3, r3
 8002028:	e7cf      	b.n	8001fca <_printf_i+0x52>
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	6825      	ldr	r5, [r4, #0]
 800202e:	1d18      	adds	r0, r3, #4
 8002030:	6010      	str	r0, [r2, #0]
 8002032:	0628      	lsls	r0, r5, #24
 8002034:	d501      	bpl.n	800203a <_printf_i+0xc2>
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	e002      	b.n	8002040 <_printf_i+0xc8>
 800203a:	0668      	lsls	r0, r5, #25
 800203c:	d5fb      	bpl.n	8002036 <_printf_i+0xbe>
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	4854      	ldr	r0, [pc, #336]	; (8002194 <_printf_i+0x21c>)
 8002042:	296f      	cmp	r1, #111	; 0x6f
 8002044:	bf14      	ite	ne
 8002046:	220a      	movne	r2, #10
 8002048:	2208      	moveq	r2, #8
 800204a:	2100      	movs	r1, #0
 800204c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002050:	6865      	ldr	r5, [r4, #4]
 8002052:	60a5      	str	r5, [r4, #8]
 8002054:	2d00      	cmp	r5, #0
 8002056:	f2c0 8095 	blt.w	8002184 <_printf_i+0x20c>
 800205a:	6821      	ldr	r1, [r4, #0]
 800205c:	f021 0104 	bic.w	r1, r1, #4
 8002060:	6021      	str	r1, [r4, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d13d      	bne.n	80020e2 <_printf_i+0x16a>
 8002066:	2d00      	cmp	r5, #0
 8002068:	f040 808e 	bne.w	8002188 <_printf_i+0x210>
 800206c:	4665      	mov	r5, ip
 800206e:	2a08      	cmp	r2, #8
 8002070:	d10b      	bne.n	800208a <_printf_i+0x112>
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	07db      	lsls	r3, r3, #31
 8002076:	d508      	bpl.n	800208a <_printf_i+0x112>
 8002078:	6923      	ldr	r3, [r4, #16]
 800207a:	6862      	ldr	r2, [r4, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	bfde      	ittt	le
 8002080:	2330      	movle	r3, #48	; 0x30
 8002082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800208a:	ebac 0305 	sub.w	r3, ip, r5
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	f8cd 8000 	str.w	r8, [sp]
 8002094:	463b      	mov	r3, r7
 8002096:	aa03      	add	r2, sp, #12
 8002098:	4621      	mov	r1, r4
 800209a:	4630      	mov	r0, r6
 800209c:	f7ff fef6 	bl	8001e8c <_printf_common>
 80020a0:	3001      	adds	r0, #1
 80020a2:	d14d      	bne.n	8002140 <_printf_i+0x1c8>
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	b005      	add	sp, #20
 80020aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ae:	4839      	ldr	r0, [pc, #228]	; (8002194 <_printf_i+0x21c>)
 80020b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020b4:	6813      	ldr	r3, [r2, #0]
 80020b6:	6821      	ldr	r1, [r4, #0]
 80020b8:	1d1d      	adds	r5, r3, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6015      	str	r5, [r2, #0]
 80020be:	060a      	lsls	r2, r1, #24
 80020c0:	d50b      	bpl.n	80020da <_printf_i+0x162>
 80020c2:	07ca      	lsls	r2, r1, #31
 80020c4:	bf44      	itt	mi
 80020c6:	f041 0120 	orrmi.w	r1, r1, #32
 80020ca:	6021      	strmi	r1, [r4, #0]
 80020cc:	b91b      	cbnz	r3, 80020d6 <_printf_i+0x15e>
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	f022 0220 	bic.w	r2, r2, #32
 80020d4:	6022      	str	r2, [r4, #0]
 80020d6:	2210      	movs	r2, #16
 80020d8:	e7b7      	b.n	800204a <_printf_i+0xd2>
 80020da:	064d      	lsls	r5, r1, #25
 80020dc:	bf48      	it	mi
 80020de:	b29b      	uxthmi	r3, r3
 80020e0:	e7ef      	b.n	80020c2 <_printf_i+0x14a>
 80020e2:	4665      	mov	r5, ip
 80020e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80020e8:	fb02 3311 	mls	r3, r2, r1, r3
 80020ec:	5cc3      	ldrb	r3, [r0, r3]
 80020ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020f2:	460b      	mov	r3, r1
 80020f4:	2900      	cmp	r1, #0
 80020f6:	d1f5      	bne.n	80020e4 <_printf_i+0x16c>
 80020f8:	e7b9      	b.n	800206e <_printf_i+0xf6>
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	6825      	ldr	r5, [r4, #0]
 80020fe:	6961      	ldr	r1, [r4, #20]
 8002100:	1d18      	adds	r0, r3, #4
 8002102:	6010      	str	r0, [r2, #0]
 8002104:	0628      	lsls	r0, r5, #24
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	d501      	bpl.n	800210e <_printf_i+0x196>
 800210a:	6019      	str	r1, [r3, #0]
 800210c:	e002      	b.n	8002114 <_printf_i+0x19c>
 800210e:	066a      	lsls	r2, r5, #25
 8002110:	d5fb      	bpl.n	800210a <_printf_i+0x192>
 8002112:	8019      	strh	r1, [r3, #0]
 8002114:	2300      	movs	r3, #0
 8002116:	6123      	str	r3, [r4, #16]
 8002118:	4665      	mov	r5, ip
 800211a:	e7b9      	b.n	8002090 <_printf_i+0x118>
 800211c:	6813      	ldr	r3, [r2, #0]
 800211e:	1d19      	adds	r1, r3, #4
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	681d      	ldr	r5, [r3, #0]
 8002124:	6862      	ldr	r2, [r4, #4]
 8002126:	2100      	movs	r1, #0
 8002128:	4628      	mov	r0, r5
 800212a:	f7fe f861 	bl	80001f0 <memchr>
 800212e:	b108      	cbz	r0, 8002134 <_printf_i+0x1bc>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	6060      	str	r0, [r4, #4]
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	6123      	str	r3, [r4, #16]
 8002138:	2300      	movs	r3, #0
 800213a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800213e:	e7a7      	b.n	8002090 <_printf_i+0x118>
 8002140:	6923      	ldr	r3, [r4, #16]
 8002142:	462a      	mov	r2, r5
 8002144:	4639      	mov	r1, r7
 8002146:	4630      	mov	r0, r6
 8002148:	47c0      	blx	r8
 800214a:	3001      	adds	r0, #1
 800214c:	d0aa      	beq.n	80020a4 <_printf_i+0x12c>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	079b      	lsls	r3, r3, #30
 8002152:	d413      	bmi.n	800217c <_printf_i+0x204>
 8002154:	68e0      	ldr	r0, [r4, #12]
 8002156:	9b03      	ldr	r3, [sp, #12]
 8002158:	4298      	cmp	r0, r3
 800215a:	bfb8      	it	lt
 800215c:	4618      	movlt	r0, r3
 800215e:	e7a3      	b.n	80020a8 <_printf_i+0x130>
 8002160:	2301      	movs	r3, #1
 8002162:	464a      	mov	r2, r9
 8002164:	4639      	mov	r1, r7
 8002166:	4630      	mov	r0, r6
 8002168:	47c0      	blx	r8
 800216a:	3001      	adds	r0, #1
 800216c:	d09a      	beq.n	80020a4 <_printf_i+0x12c>
 800216e:	3501      	adds	r5, #1
 8002170:	68e3      	ldr	r3, [r4, #12]
 8002172:	9a03      	ldr	r2, [sp, #12]
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	42ab      	cmp	r3, r5
 8002178:	dcf2      	bgt.n	8002160 <_printf_i+0x1e8>
 800217a:	e7eb      	b.n	8002154 <_printf_i+0x1dc>
 800217c:	2500      	movs	r5, #0
 800217e:	f104 0919 	add.w	r9, r4, #25
 8002182:	e7f5      	b.n	8002170 <_printf_i+0x1f8>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ac      	bne.n	80020e2 <_printf_i+0x16a>
 8002188:	7803      	ldrb	r3, [r0, #0]
 800218a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800218e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002192:	e76c      	b.n	800206e <_printf_i+0xf6>
 8002194:	080023fd 	.word	0x080023fd
 8002198:	0800240e 	.word	0x0800240e

0800219c <memcpy>:
 800219c:	b510      	push	{r4, lr}
 800219e:	1e43      	subs	r3, r0, #1
 80021a0:	440a      	add	r2, r1
 80021a2:	4291      	cmp	r1, r2
 80021a4:	d100      	bne.n	80021a8 <memcpy+0xc>
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021b0:	e7f7      	b.n	80021a2 <memcpy+0x6>

080021b2 <memmove>:
 80021b2:	4288      	cmp	r0, r1
 80021b4:	b510      	push	{r4, lr}
 80021b6:	eb01 0302 	add.w	r3, r1, r2
 80021ba:	d807      	bhi.n	80021cc <memmove+0x1a>
 80021bc:	1e42      	subs	r2, r0, #1
 80021be:	4299      	cmp	r1, r3
 80021c0:	d00a      	beq.n	80021d8 <memmove+0x26>
 80021c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021ca:	e7f8      	b.n	80021be <memmove+0xc>
 80021cc:	4283      	cmp	r3, r0
 80021ce:	d9f5      	bls.n	80021bc <memmove+0xa>
 80021d0:	1881      	adds	r1, r0, r2
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	42d3      	cmn	r3, r2
 80021d6:	d100      	bne.n	80021da <memmove+0x28>
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021e2:	e7f7      	b.n	80021d4 <memmove+0x22>

080021e4 <_free_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4605      	mov	r5, r0
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d045      	beq.n	8002278 <_free_r+0x94>
 80021ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021f0:	1f0c      	subs	r4, r1, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bfb8      	it	lt
 80021f6:	18e4      	addlt	r4, r4, r3
 80021f8:	f000 f8d2 	bl	80023a0 <__malloc_lock>
 80021fc:	4a1f      	ldr	r2, [pc, #124]	; (800227c <_free_r+0x98>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	4610      	mov	r0, r2
 8002202:	b933      	cbnz	r3, 8002212 <_free_r+0x2e>
 8002204:	6063      	str	r3, [r4, #4]
 8002206:	6014      	str	r4, [r2, #0]
 8002208:	4628      	mov	r0, r5
 800220a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800220e:	f000 b8c8 	b.w	80023a2 <__malloc_unlock>
 8002212:	42a3      	cmp	r3, r4
 8002214:	d90c      	bls.n	8002230 <_free_r+0x4c>
 8002216:	6821      	ldr	r1, [r4, #0]
 8002218:	1862      	adds	r2, r4, r1
 800221a:	4293      	cmp	r3, r2
 800221c:	bf04      	itt	eq
 800221e:	681a      	ldreq	r2, [r3, #0]
 8002220:	685b      	ldreq	r3, [r3, #4]
 8002222:	6063      	str	r3, [r4, #4]
 8002224:	bf04      	itt	eq
 8002226:	1852      	addeq	r2, r2, r1
 8002228:	6022      	streq	r2, [r4, #0]
 800222a:	6004      	str	r4, [r0, #0]
 800222c:	e7ec      	b.n	8002208 <_free_r+0x24>
 800222e:	4613      	mov	r3, r2
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	b10a      	cbz	r2, 8002238 <_free_r+0x54>
 8002234:	42a2      	cmp	r2, r4
 8002236:	d9fa      	bls.n	800222e <_free_r+0x4a>
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	1858      	adds	r0, r3, r1
 800223c:	42a0      	cmp	r0, r4
 800223e:	d10b      	bne.n	8002258 <_free_r+0x74>
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	4401      	add	r1, r0
 8002244:	1858      	adds	r0, r3, r1
 8002246:	4282      	cmp	r2, r0
 8002248:	6019      	str	r1, [r3, #0]
 800224a:	d1dd      	bne.n	8002208 <_free_r+0x24>
 800224c:	6810      	ldr	r0, [r2, #0]
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	4401      	add	r1, r0
 8002254:	6019      	str	r1, [r3, #0]
 8002256:	e7d7      	b.n	8002208 <_free_r+0x24>
 8002258:	d902      	bls.n	8002260 <_free_r+0x7c>
 800225a:	230c      	movs	r3, #12
 800225c:	602b      	str	r3, [r5, #0]
 800225e:	e7d3      	b.n	8002208 <_free_r+0x24>
 8002260:	6820      	ldr	r0, [r4, #0]
 8002262:	1821      	adds	r1, r4, r0
 8002264:	428a      	cmp	r2, r1
 8002266:	bf04      	itt	eq
 8002268:	6811      	ldreq	r1, [r2, #0]
 800226a:	6852      	ldreq	r2, [r2, #4]
 800226c:	6062      	str	r2, [r4, #4]
 800226e:	bf04      	itt	eq
 8002270:	1809      	addeq	r1, r1, r0
 8002272:	6021      	streq	r1, [r4, #0]
 8002274:	605c      	str	r4, [r3, #4]
 8002276:	e7c7      	b.n	8002208 <_free_r+0x24>
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	bf00      	nop
 800227c:	20000094 	.word	0x20000094

08002280 <_malloc_r>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	1ccd      	adds	r5, r1, #3
 8002284:	f025 0503 	bic.w	r5, r5, #3
 8002288:	3508      	adds	r5, #8
 800228a:	2d0c      	cmp	r5, #12
 800228c:	bf38      	it	cc
 800228e:	250c      	movcc	r5, #12
 8002290:	2d00      	cmp	r5, #0
 8002292:	4606      	mov	r6, r0
 8002294:	db01      	blt.n	800229a <_malloc_r+0x1a>
 8002296:	42a9      	cmp	r1, r5
 8002298:	d903      	bls.n	80022a2 <_malloc_r+0x22>
 800229a:	230c      	movs	r3, #12
 800229c:	6033      	str	r3, [r6, #0]
 800229e:	2000      	movs	r0, #0
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	f000 f87d 	bl	80023a0 <__malloc_lock>
 80022a6:	4a21      	ldr	r2, [pc, #132]	; (800232c <_malloc_r+0xac>)
 80022a8:	6814      	ldr	r4, [r2, #0]
 80022aa:	4621      	mov	r1, r4
 80022ac:	b991      	cbnz	r1, 80022d4 <_malloc_r+0x54>
 80022ae:	4c20      	ldr	r4, [pc, #128]	; (8002330 <_malloc_r+0xb0>)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	b91b      	cbnz	r3, 80022bc <_malloc_r+0x3c>
 80022b4:	4630      	mov	r0, r6
 80022b6:	f000 f863 	bl	8002380 <_sbrk_r>
 80022ba:	6020      	str	r0, [r4, #0]
 80022bc:	4629      	mov	r1, r5
 80022be:	4630      	mov	r0, r6
 80022c0:	f000 f85e 	bl	8002380 <_sbrk_r>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d124      	bne.n	8002312 <_malloc_r+0x92>
 80022c8:	230c      	movs	r3, #12
 80022ca:	6033      	str	r3, [r6, #0]
 80022cc:	4630      	mov	r0, r6
 80022ce:	f000 f868 	bl	80023a2 <__malloc_unlock>
 80022d2:	e7e4      	b.n	800229e <_malloc_r+0x1e>
 80022d4:	680b      	ldr	r3, [r1, #0]
 80022d6:	1b5b      	subs	r3, r3, r5
 80022d8:	d418      	bmi.n	800230c <_malloc_r+0x8c>
 80022da:	2b0b      	cmp	r3, #11
 80022dc:	d90f      	bls.n	80022fe <_malloc_r+0x7e>
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	50cd      	str	r5, [r1, r3]
 80022e2:	18cc      	adds	r4, r1, r3
 80022e4:	4630      	mov	r0, r6
 80022e6:	f000 f85c 	bl	80023a2 <__malloc_unlock>
 80022ea:	f104 000b 	add.w	r0, r4, #11
 80022ee:	1d23      	adds	r3, r4, #4
 80022f0:	f020 0007 	bic.w	r0, r0, #7
 80022f4:	1ac3      	subs	r3, r0, r3
 80022f6:	d0d3      	beq.n	80022a0 <_malloc_r+0x20>
 80022f8:	425a      	negs	r2, r3
 80022fa:	50e2      	str	r2, [r4, r3]
 80022fc:	e7d0      	b.n	80022a0 <_malloc_r+0x20>
 80022fe:	428c      	cmp	r4, r1
 8002300:	684b      	ldr	r3, [r1, #4]
 8002302:	bf16      	itet	ne
 8002304:	6063      	strne	r3, [r4, #4]
 8002306:	6013      	streq	r3, [r2, #0]
 8002308:	460c      	movne	r4, r1
 800230a:	e7eb      	b.n	80022e4 <_malloc_r+0x64>
 800230c:	460c      	mov	r4, r1
 800230e:	6849      	ldr	r1, [r1, #4]
 8002310:	e7cc      	b.n	80022ac <_malloc_r+0x2c>
 8002312:	1cc4      	adds	r4, r0, #3
 8002314:	f024 0403 	bic.w	r4, r4, #3
 8002318:	42a0      	cmp	r0, r4
 800231a:	d005      	beq.n	8002328 <_malloc_r+0xa8>
 800231c:	1a21      	subs	r1, r4, r0
 800231e:	4630      	mov	r0, r6
 8002320:	f000 f82e 	bl	8002380 <_sbrk_r>
 8002324:	3001      	adds	r0, #1
 8002326:	d0cf      	beq.n	80022c8 <_malloc_r+0x48>
 8002328:	6025      	str	r5, [r4, #0]
 800232a:	e7db      	b.n	80022e4 <_malloc_r+0x64>
 800232c:	20000094 	.word	0x20000094
 8002330:	20000098 	.word	0x20000098

08002334 <_realloc_r>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	4607      	mov	r7, r0
 8002338:	4614      	mov	r4, r2
 800233a:	460e      	mov	r6, r1
 800233c:	b921      	cbnz	r1, 8002348 <_realloc_r+0x14>
 800233e:	4611      	mov	r1, r2
 8002340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002344:	f7ff bf9c 	b.w	8002280 <_malloc_r>
 8002348:	b922      	cbnz	r2, 8002354 <_realloc_r+0x20>
 800234a:	f7ff ff4b 	bl	80021e4 <_free_r>
 800234e:	4625      	mov	r5, r4
 8002350:	4628      	mov	r0, r5
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002354:	f000 f826 	bl	80023a4 <_malloc_usable_size_r>
 8002358:	42a0      	cmp	r0, r4
 800235a:	d20f      	bcs.n	800237c <_realloc_r+0x48>
 800235c:	4621      	mov	r1, r4
 800235e:	4638      	mov	r0, r7
 8002360:	f7ff ff8e 	bl	8002280 <_malloc_r>
 8002364:	4605      	mov	r5, r0
 8002366:	2800      	cmp	r0, #0
 8002368:	d0f2      	beq.n	8002350 <_realloc_r+0x1c>
 800236a:	4631      	mov	r1, r6
 800236c:	4622      	mov	r2, r4
 800236e:	f7ff ff15 	bl	800219c <memcpy>
 8002372:	4631      	mov	r1, r6
 8002374:	4638      	mov	r0, r7
 8002376:	f7ff ff35 	bl	80021e4 <_free_r>
 800237a:	e7e9      	b.n	8002350 <_realloc_r+0x1c>
 800237c:	4635      	mov	r5, r6
 800237e:	e7e7      	b.n	8002350 <_realloc_r+0x1c>

08002380 <_sbrk_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4c06      	ldr	r4, [pc, #24]	; (800239c <_sbrk_r+0x1c>)
 8002384:	2300      	movs	r3, #0
 8002386:	4605      	mov	r5, r0
 8002388:	4608      	mov	r0, r1
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	f7fe faa2 	bl	80008d4 <_sbrk>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_sbrk_r+0x1a>
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	b103      	cbz	r3, 800239a <_sbrk_r+0x1a>
 8002398:	602b      	str	r3, [r5, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	200000a0 	.word	0x200000a0

080023a0 <__malloc_lock>:
 80023a0:	4770      	bx	lr

080023a2 <__malloc_unlock>:
 80023a2:	4770      	bx	lr

080023a4 <_malloc_usable_size_r>:
 80023a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a8:	1f18      	subs	r0, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfbc      	itt	lt
 80023ae:	580b      	ldrlt	r3, [r1, r0]
 80023b0:	18c0      	addlt	r0, r0, r3
 80023b2:	4770      	bx	lr

080023b4 <_init>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr

080023c0 <_fini>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr

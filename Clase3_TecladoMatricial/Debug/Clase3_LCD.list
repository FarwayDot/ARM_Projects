
Clase3_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800243c  0800243c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002444  08002444  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800244c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  080024bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080024bc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b85  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001097  00000000  00000000  00024c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000448  00000000  00000000  00025cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003a0  00000000  00000000  00026108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b3e  00000000  00000000  000264a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c1b  00000000  00000000  0003afe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000822ca  00000000  00000000  0003fc01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1ecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000120c  00000000  00000000  000c1f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023b8 	.word	0x080023b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080023b8 	.word	0x080023b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i=0;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 f97d 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f847 	bl	8000630 <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  // GPIOA PA5

  Led_Init();
 80005a2:	f001 fa71 	bl	8001a88 <Led_Init>

  // GPIOC PC13

  Push_Init();
 80005a6:	f001 faa5 	bl	8001af4 <Push_Init>

  //Inicializar LCD

  lcd_init();
 80005aa:	f000 fef7 	bl	800139c <lcd_init>

  //Mensaje de prueba}

  lcd_gotoxy(1,1);
 80005ae:	2101      	movs	r1, #1
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 fa2b 	bl	8001a0c <lcd_gotoxy>
  lcd_puts("Hola Mundo", 10);
 80005b6:	210a      	movs	r1, #10
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <main+0x94>)
 80005ba:	f001 fa0d 	bl	80019d8 <lcd_puts>

  lcd_gotoxy(1,2);
 80005be:	2102      	movs	r1, #2
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 fa23 	bl	8001a0c <lcd_gotoxy>
  lcd_puts("JeanFranco", 10);
 80005c6:	210a      	movs	r1, #10
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0x98>)
 80005ca:	f001 fa05 	bl	80019d8 <lcd_puts>

  HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 f9d3 	bl	800097c <HAL_Delay>
  lcd_clear();
 80005d6:	f001 fa4f 	bl	8001a78 <lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0;i<=100;i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e01c      	b.n	800061a <main+0x8a>
	  {
		  lcd_clear();
 80005e0:	f001 fa4a 	bl	8001a78 <lcd_clear>
		  sprintf(strcont,"Contador: %d",i);
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	463b      	mov	r3, r7
 80005e8:	4910      	ldr	r1, [pc, #64]	; (800062c <main+0x9c>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fade 	bl	8001bac <siprintf>
		  lcd_gotoxy(1,1);
 80005f0:	2101      	movs	r1, #1
 80005f2:	2001      	movs	r0, #1
 80005f4:	f001 fa0a 	bl	8001a0c <lcd_gotoxy>
		  lcd_puts(strcont,strlen(strcont));
 80005f8:	463b      	mov	r3, r7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf0 	bl	80001e0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b2da      	uxtb	r2, r3
 8000604:	463b      	mov	r3, r7
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f9e5 	bl	80019d8 <lcd_puts>
		  HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 f9b4 	bl	800097c <HAL_Delay>
	  for(i=0;i<=100;i++)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b64      	cmp	r3, #100	; 0x64
 800061e:	d9df      	bls.n	80005e0 <main+0x50>
 8000620:	e7db      	b.n	80005da <main+0x4a>
 8000622:	bf00      	nop
 8000624:	080023d0 	.word	0x080023d0
 8000628:	080023dc 	.word	0x080023dc
 800062c:	080023e8 	.word	0x080023e8

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 faac 	bl	8001b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xb8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xbc>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fa71 	bl	8000b8c <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 f81e 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fccc 	bl	800106c <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 f809 	bl	80006f0 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <MemManage_Handler+0x4>

0800076a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler+0x4>

08000776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 f8ca 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f001 f9b4 	bl	8001b48 <__errno>
 80007e0:	4602      	mov	r2, r0
 80007e2:	230c      	movs	r3, #12
 80007e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20018000 	.word	0x20018000
 800080c:	00000400 	.word	0x00000400
 8000810:	2000008c 	.word	0x2000008c
 8000814:	200000a0 	.word	0x200000a0

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <SystemInit+0x28>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <SystemInit+0x28>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SystemInit+0x28>)
 800082e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000832:	609a      	str	r2, [r3, #8]
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800087c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800084a:	e003      	b.n	8000854 <LoopCopyDataInit>

0800084c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800084e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000852:	3104      	adds	r1, #4

08000854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800085a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800085c:	d3f6      	bcc.n	800084c <CopyDataInit>
  ldr  r2, =_sbss
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000860:	e002      	b.n	8000868 <LoopFillZerobss>

08000862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000864:	f842 3b04 	str.w	r3, [r2], #4

08000868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800086a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800086c:	d3f9      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800086e:	f7ff ffd3 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 f96f 	bl	8001b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000876:	f7ff fe8b 	bl	8000590 <main>
  bx  lr    
 800087a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800087c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000880:	0800244c 	.word	0x0800244c
  ldr  r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000888:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800088c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000890:	200000a0 	.word	0x200000a0

08000894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC_IRQHandler>
	...

08000898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <HAL_Init+0x40>)
 80008a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_Init+0x40>)
 80008ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x40>)
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 f92f 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f7ff ff18 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023c00 	.word	0x40023c00

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f939 	bl	8000b72 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 f90f 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	20000098 	.word	0x20000098

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000098 	.word	0x20000098

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff ffee 	bl	8000964 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_Delay+0x40>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffde 	bl	8000964 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000008 	.word	0x20000008

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff47 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5c 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff8e 	bl	8000a78 <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e25b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d075      	beq.n	8000c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000baa:	4ba3      	ldr	r3, [pc, #652]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d00c      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb6:	4ba0      	ldr	r3, [pc, #640]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d112      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	4b9d      	ldr	r3, [pc, #628]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bce:	d10b      	bne.n	8000be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	4b99      	ldr	r3, [pc, #612]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d05b      	beq.n	8000c94 <HAL_RCC_OscConfig+0x108>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d157      	bne.n	8000c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e236      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d106      	bne.n	8000c00 <HAL_RCC_OscConfig+0x74>
 8000bf2:	4b91      	ldr	r3, [pc, #580]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a90      	ldr	r2, [pc, #576]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01d      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b8b      	ldr	r3, [pc, #556]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a8a      	ldr	r2, [pc, #552]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b88      	ldr	r3, [pc, #544]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a87      	ldr	r2, [pc, #540]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0xb0>
 8000c24:	4b84      	ldr	r3, [pc, #528]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a83      	ldr	r2, [pc, #524]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b81      	ldr	r3, [pc, #516]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a80      	ldr	r2, [pc, #512]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d013      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fe8e 	bl	8000964 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fe8a 	bl	8000964 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1fb      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	4b76      	ldr	r3, [pc, #472]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0xc0>
 8000c6a:	e014      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fe7a 	bl	8000964 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fe76 	bl	8000964 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1e7      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0xe8>
 8000c92:	e000      	b.n	8000c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d063      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00b      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b62      	ldr	r3, [pc, #392]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e1bb      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4952      	ldr	r1, [pc, #328]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e03a      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <HAL_RCC_OscConfig+0x2b0>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d02:	f7ff fe2f 	bl	8000964 <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fe2b 	bl	8000964 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e19c      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4940      	ldr	r1, [pc, #256]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e015      	b.n	8000d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <HAL_RCC_OscConfig+0x2b0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d44:	f7ff fe0e 	bl	8000964 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fe0a 	bl	8000964 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e17b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d030      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d016      	beq.n	8000dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <HAL_RCC_OscConfig+0x2b4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d84:	f7ff fdee 	bl	8000964 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fdea 	bl	8000964 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e15b      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x200>
 8000daa:	e015      	b.n	8000dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_RCC_OscConfig+0x2b4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fdd7 	bl	8000964 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dba:	f7ff fdd3 	bl	8000964 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e144      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f0      	bne.n	8000dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a0 	beq.w	8000f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d121      	bne.n	8000e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_RCC_OscConfig+0x2b8>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fd99 	bl	8000964 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	e011      	b.n	8000e5a <HAL_RCC_OscConfig+0x2ce>
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	42470000 	.word	0x42470000
 8000e40:	42470e80 	.word	0x42470e80
 8000e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e48:	f7ff fd8c 	bl	8000964 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e0fd      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_RCC_OscConfig+0x4d4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d106      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
 8000e6e:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e72:	4a7c      	ldr	r2, [pc, #496]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7a:	e01c      	b.n	8000eb6 <HAL_RCC_OscConfig+0x32a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d10c      	bne.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e84:	4b77      	ldr	r3, [pc, #476]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e88:	4a76      	ldr	r2, [pc, #472]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e90:	4b74      	ldr	r3, [pc, #464]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e94:	4a73      	ldr	r2, [pc, #460]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9c:	e00b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x32a>
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea2:	4a70      	ldr	r2, [pc, #448]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eae:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d015      	beq.n	8000eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fd51 	bl	8000964 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fd4d 	bl	8000964 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e0bc      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000edc:	4b61      	ldr	r3, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ee      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x33a>
 8000ee8:	e014      	b.n	8000f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eea:	f7ff fd3b 	bl	8000964 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	e00a      	b.n	8000f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fd37 	bl	8000964 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0a6      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f08:	4b56      	ldr	r3, [pc, #344]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ee      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d105      	bne.n	8000f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1a:	4b52      	ldr	r3, [pc, #328]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8092 	beq.w	8001054 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d05c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d141      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f44:	4b48      	ldr	r3, [pc, #288]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fd0b 	bl	8000964 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f52:	f7ff fd07 	bl	8000964 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e078      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	019b      	lsls	r3, r3, #6
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f92:	061b      	lsls	r3, r3, #24
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fce0 	bl	8000964 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fcdc 	bl	8000964 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e04d      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
 8000fc6:	e045      	b.n	8001054 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <HAL_RCC_OscConfig+0x4dc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fcc9 	bl	8000964 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd6:	f7ff fcc5 	bl	8000964 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e036      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x44a>
 8000ff4:	e02e      	b.n	8001054 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e029      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_RCC_OscConfig+0x4d8>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	429a      	cmp	r2, r3
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d115      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800102a:	4013      	ands	r3, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001030:	4293      	cmp	r3, r2
 8001032:	d10d      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800103e:	429a      	cmp	r2, r3
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000
 8001064:	40023800 	.word	0x40023800
 8001068:	42470060 	.word	0x42470060

0800106c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0cc      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d90c      	bls.n	80010a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0b8      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	494d      	ldr	r1, [pc, #308]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d044      	beq.n	800118c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d119      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e07f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d003      	beq.n	800112a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001126:	2b03      	cmp	r3, #3
 8001128:	d107      	bne.n	800113a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e06f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e067      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f023 0203 	bic.w	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4934      	ldr	r1, [pc, #208]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	4313      	orrs	r3, r2
 800115a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800115c:	f7ff fc02 	bl	8000964 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	e00a      	b.n	800117a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f7ff fbfe 	bl	8000964 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001172:	4293      	cmp	r3, r2
 8001174:	d901      	bls.n	800117a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e04f      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 020c 	and.w	r2, r3, #12
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	429a      	cmp	r2, r3
 800118a:	d1eb      	bne.n	8001164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d20c      	bcs.n	80011b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e032      	b.n	800121a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4916      	ldr	r1, [pc, #88]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d009      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	490e      	ldr	r1, [pc, #56]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f2:	f000 f821 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80011f6:	4601      	mov	r1, r0
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	fa21 f303 	lsr.w	r3, r1, r3
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_ClockConfig+0x1c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fb62 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00
 8001228:	40023800 	.word	0x40023800
 800122c:	080023f8 	.word	0x080023f8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d007      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x32>
 800125a:	2b08      	cmp	r3, #8
 800125c:	d008      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x38>
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 808d 	bne.w	800137e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001266:	60bb      	str	r3, [r7, #8]
       break;
 8001268:	e08c      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800126a:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 800126c:	60bb      	str	r3, [r7, #8]
      break;
 800126e:	e089      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d023      	beq.n	80012ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	099b      	lsrs	r3, r3, #6
 800128c:	f04f 0400 	mov.w	r4, #0
 8001290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	ea03 0501 	and.w	r5, r3, r1
 800129c:	ea04 0602 	and.w	r6, r4, r2
 80012a0:	4a3d      	ldr	r2, [pc, #244]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 80012a2:	fb02 f106 	mul.w	r1, r2, r6
 80012a6:	2200      	movs	r2, #0
 80012a8:	fb02 f205 	mul.w	r2, r2, r5
 80012ac:	440a      	add	r2, r1
 80012ae:	493a      	ldr	r1, [pc, #232]	; (8001398 <HAL_RCC_GetSysClockFreq+0x160>)
 80012b0:	fba5 0101 	umull	r0, r1, r5, r1
 80012b4:	1853      	adds	r3, r2, r1
 80012b6:	4619      	mov	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f04f 0400 	mov.w	r4, #0
 80012be:	461a      	mov	r2, r3
 80012c0:	4623      	mov	r3, r4
 80012c2:	f7fe ffe5 	bl	8000290 <__aeabi_uldivmod>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e049      	b.n	8001362 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	ea03 0501 	and.w	r5, r3, r1
 80012e4:	ea04 0602 	and.w	r6, r4, r2
 80012e8:	4629      	mov	r1, r5
 80012ea:	4632      	mov	r2, r6
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	f04f 0400 	mov.w	r4, #0
 80012f4:	0154      	lsls	r4, r2, #5
 80012f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012fa:	014b      	lsls	r3, r1, #5
 80012fc:	4619      	mov	r1, r3
 80012fe:	4622      	mov	r2, r4
 8001300:	1b49      	subs	r1, r1, r5
 8001302:	eb62 0206 	sbc.w	r2, r2, r6
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	f04f 0400 	mov.w	r4, #0
 800130e:	0194      	lsls	r4, r2, #6
 8001310:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001314:	018b      	lsls	r3, r1, #6
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	eb64 0402 	sbc.w	r4, r4, r2
 800131c:	f04f 0100 	mov.w	r1, #0
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	00e2      	lsls	r2, r4, #3
 8001326:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800132a:	00d9      	lsls	r1, r3, #3
 800132c:	460b      	mov	r3, r1
 800132e:	4614      	mov	r4, r2
 8001330:	195b      	adds	r3, r3, r5
 8001332:	eb44 0406 	adc.w	r4, r4, r6
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	02a2      	lsls	r2, r4, #10
 8001340:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001344:	0299      	lsls	r1, r3, #10
 8001346:	460b      	mov	r3, r1
 8001348:	4614      	mov	r4, r2
 800134a:	4618      	mov	r0, r3
 800134c:	4621      	mov	r1, r4
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f04f 0400 	mov.w	r4, #0
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	f7fe ff9a 	bl	8000290 <__aeabi_uldivmod>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_GetSysClockFreq+0x158>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	3301      	adds	r3, #1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	60bb      	str	r3, [r7, #8]
      break;
 800137c:	e002      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001380:	60bb      	str	r3, [r7, #8]
      break;
 8001382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	00f42400 	.word	0x00f42400
 8001398:	017d7840 	.word	0x017d7840

0800139c <lcd_init>:
 * char strtemp[15];
 * sprintf(strtemp, "TEMP=%d", temparature);
 *
 * */
void lcd_init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
		LCD4_PIN       //	PB5
		LCD5_PIN       //	PB4
		LCD6_PIN       //	PB10
		LCD7_PIN       //	PA8
	*/
	RCC->AHB1ENR |= (1<<2) | (1<<1) | (1<< 0);
 80013a0:	4b9a      	ldr	r3, [pc, #616]	; (800160c <lcd_init+0x270>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a99      	ldr	r2, [pc, #612]	; (800160c <lcd_init+0x270>)
 80013a6:	f043 0307 	orr.w	r3, r3, #7
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER   &= ~(1 << 2*(9) + 1);	//	A9
 80013ac:	4b98      	ldr	r3, [pc, #608]	; (8001610 <lcd_init+0x274>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a97      	ldr	r2, [pc, #604]	; (8001610 <lcd_init+0x274>)
 80013b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80013b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (1 << 2*(9) );
 80013b8:	4b95      	ldr	r3, [pc, #596]	; (8001610 <lcd_init+0x274>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a94      	ldr	r2, [pc, #592]	; (8001610 <lcd_init+0x274>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER  &= ~(1 <<   (9) );
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <lcd_init+0x274>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <lcd_init+0x274>)
 80013ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013ce:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=  (1 << (2*(9) + 1) ) |  (1 <<  2*(9) );		//	01: 25 MHz Medium speed
 80013d0:	4b8f      	ldr	r3, [pc, #572]	; (8001610 <lcd_init+0x274>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a8e      	ldr	r2, [pc, #568]	; (8001610 <lcd_init+0x274>)
 80013d6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80013da:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR   &= ~(1 << (2*(9) + 1) ) & ~(1 << (2*(9)) );
 80013dc:	4b8c      	ldr	r3, [pc, #560]	; (8001610 <lcd_init+0x274>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a8b      	ldr	r2, [pc, #556]	; (8001610 <lcd_init+0x274>)
 80013e2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80013e6:	60d3      	str	r3, [r2, #12]

	GPIOC->MODER   &= ~(1 <<  2*(7) + 1);	//	C7
 80013e8:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <lcd_init+0x278>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a89      	ldr	r2, [pc, #548]	; (8001614 <lcd_init+0x278>)
 80013ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013f2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER   |=  (1 <<  2*(7) );
 80013f4:	4b87      	ldr	r3, [pc, #540]	; (8001614 <lcd_init+0x278>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a86      	ldr	r2, [pc, #536]	; (8001614 <lcd_init+0x278>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER  &= ~(1 <<   (7) );
 8001400:	4b84      	ldr	r3, [pc, #528]	; (8001614 <lcd_init+0x278>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a83      	ldr	r2, [pc, #524]	; (8001614 <lcd_init+0x278>)
 8001406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800140a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |=  (1 << (2*(7) + 1) ) |  (1 <<  2*(7) );
 800140c:	4b81      	ldr	r3, [pc, #516]	; (8001614 <lcd_init+0x278>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a80      	ldr	r2, [pc, #512]	; (8001614 <lcd_init+0x278>)
 8001412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001416:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR   &= ~(1 << (2*(7) + 1) ) & ~(1 << (2*(7)) );
 8001418:	4b7e      	ldr	r3, [pc, #504]	; (8001614 <lcd_init+0x278>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a7d      	ldr	r2, [pc, #500]	; (8001614 <lcd_init+0x278>)
 800141e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001422:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(5) + 1);	//	B5
 8001424:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <lcd_init+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a7b      	ldr	r2, [pc, #492]	; (8001618 <lcd_init+0x27c>)
 800142a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800142e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(5) );
 8001430:	4b79      	ldr	r3, [pc, #484]	; (8001618 <lcd_init+0x27c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a78      	ldr	r2, [pc, #480]	; (8001618 <lcd_init+0x27c>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (5) );
 800143c:	4b76      	ldr	r3, [pc, #472]	; (8001618 <lcd_init+0x27c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a75      	ldr	r2, [pc, #468]	; (8001618 <lcd_init+0x27c>)
 8001442:	f023 0320 	bic.w	r3, r3, #32
 8001446:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(5) + 1) ) |  (1 <<  2*(5) );
 8001448:	4b73      	ldr	r3, [pc, #460]	; (8001618 <lcd_init+0x27c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a72      	ldr	r2, [pc, #456]	; (8001618 <lcd_init+0x27c>)
 800144e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001452:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(5) + 1) ) & ~(1 << (2*(5)) );
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <lcd_init+0x27c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <lcd_init+0x27c>)
 800145a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800145e:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(4) + 1);	//	B4
 8001460:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <lcd_init+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <lcd_init+0x27c>)
 8001466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(4) );
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <lcd_init+0x27c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a69      	ldr	r2, [pc, #420]	; (8001618 <lcd_init+0x27c>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (4) );
 8001478:	4b67      	ldr	r3, [pc, #412]	; (8001618 <lcd_init+0x27c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a66      	ldr	r2, [pc, #408]	; (8001618 <lcd_init+0x27c>)
 800147e:	f023 0310 	bic.w	r3, r3, #16
 8001482:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(4) + 1) ) |  (1 <<  2*(4) );
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <lcd_init+0x27c>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a63      	ldr	r2, [pc, #396]	; (8001618 <lcd_init+0x27c>)
 800148a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800148e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(4) + 1) ) & ~(1 << (2*(4)) );
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <lcd_init+0x27c>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a60      	ldr	r2, [pc, #384]	; (8001618 <lcd_init+0x27c>)
 8001496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800149a:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER   &= ~(1 <<  2*(10) + 1);	//	B10
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <lcd_init+0x27c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5d      	ldr	r2, [pc, #372]	; (8001618 <lcd_init+0x27c>)
 80014a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014a6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER   |=  (1 <<  2*(10) );
 80014a8:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <lcd_init+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5a      	ldr	r2, [pc, #360]	; (8001618 <lcd_init+0x27c>)
 80014ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014b2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(1 <<    (10) );
 80014b4:	4b58      	ldr	r3, [pc, #352]	; (8001618 <lcd_init+0x27c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a57      	ldr	r2, [pc, #348]	; (8001618 <lcd_init+0x27c>)
 80014ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014be:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |=  (1 << (2*(10) + 1) ) |  (1 <<  2*(10) );
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <lcd_init+0x27c>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <lcd_init+0x27c>)
 80014c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80014ca:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR   &= ~(1 << (2*(10) + 1) ) & ~(1 << (2*(10)) );
 80014cc:	4b52      	ldr	r3, [pc, #328]	; (8001618 <lcd_init+0x27c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a51      	ldr	r2, [pc, #324]	; (8001618 <lcd_init+0x27c>)
 80014d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80014d6:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER   &= ~(1 <<  2*(8) + 1);	//	A8
 80014d8:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <lcd_init+0x274>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <lcd_init+0x274>)
 80014de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=  (1 <<  2*(8) );
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <lcd_init+0x274>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a49      	ldr	r2, [pc, #292]	; (8001610 <lcd_init+0x274>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER  &= ~(1 <<    (8) );
 80014f0:	4b47      	ldr	r3, [pc, #284]	; (8001610 <lcd_init+0x274>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a46      	ldr	r2, [pc, #280]	; (8001610 <lcd_init+0x274>)
 80014f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fa:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=  (1 << (2*(8) + 1) ) |  (1 <<  2*(8) );
 80014fc:	4b44      	ldr	r3, [pc, #272]	; (8001610 <lcd_init+0x274>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a43      	ldr	r2, [pc, #268]	; (8001610 <lcd_init+0x274>)
 8001502:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001506:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR   &= ~(1 << (2*(8) + 1) ) & ~(1 << (2*(8)) );
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <lcd_init+0x274>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <lcd_init+0x274>)
 800150e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001512:	60d3      	str	r3, [r2, #12]

	HAL_Delay(15);
 8001514:	200f      	movs	r0, #15
 8001516:	f7ff fa31 	bl	800097c <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <lcd_init+0x274>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <lcd_init+0x274>)
 8001520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <lcd_init+0x27c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a3b      	ldr	r2, [pc, #236]	; (8001618 <lcd_init+0x27c>)
 800152c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <lcd_init+0x27c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <lcd_init+0x27c>)
 8001538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <lcd_init+0x27c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <lcd_init+0x27c>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	6193      	str	r3, [r2, #24]
	LCDE_OFF;
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <lcd_init+0x278>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <lcd_init+0x278>)
 8001550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001554:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <lcd_init+0x274>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <lcd_init+0x274>)
 800155c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001560:	6193      	str	r3, [r2, #24]
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <lcd_init+0x274>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <lcd_init+0x274>)
 8001568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <lcd_init+0x27c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <lcd_init+0x27c>)
 8001574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <lcd_init+0x27c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <lcd_init+0x27c>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <lcd_init+0x27c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <lcd_init+0x27c>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <lcd_init+0x278>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <lcd_init+0x278>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <lcd_init+0x274>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <lcd_init+0x274>)
 80015a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a8:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f7ff f9e6 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <lcd_init+0x278>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <lcd_init+0x278>)
 80015b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ba:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f7ff f9dd 	bl	800097c <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <lcd_init+0x274>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <lcd_init+0x274>)
 80015c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015cc:	6193      	str	r3, [r2, #24]
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <lcd_init+0x27c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <lcd_init+0x27c>)
 80015d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <lcd_init+0x27c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <lcd_init+0x27c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <lcd_init+0x27c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <lcd_init+0x27c>)
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <lcd_init+0x278>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <lcd_init+0x278>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fc:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <lcd_init+0x274>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <lcd_init+0x274>)
 8001604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001608:	e008      	b.n	800161c <lcd_init+0x280>
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800
 8001618:	40020400 	.word	0x40020400
 800161c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 800161e:	200a      	movs	r0, #10
 8001620:	f7ff f9ac 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <lcd_init+0x310>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <lcd_init+0x310>)
 800162a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800162e:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 8001630:	200a      	movs	r0, #10
 8001632:	f7ff f9a3 	bl	800097c <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <lcd_init+0x314>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <lcd_init+0x314>)
 800163c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <lcd_init+0x318>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <lcd_init+0x318>)
 8001648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <lcd_init+0x318>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <lcd_init+0x318>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6193      	str	r3, [r2, #24]
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <lcd_init+0x318>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <lcd_init+0x318>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001664:	6193      	str	r3, [r2, #24]
	LCDE_ON;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <lcd_init+0x310>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <lcd_init+0x310>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6193      	str	r3, [r2, #24]
	//LCDRW_OFF;
	LCDRS_OFF;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <lcd_init+0x314>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <lcd_init+0x314>)
 8001678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 800167e:	200a      	movs	r0, #10
 8001680:	f7ff f97c 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <lcd_init+0x310>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <lcd_init+0x310>)
 800168a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800168e:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);
 8001690:	200a      	movs	r0, #10
 8001692:	f7ff f973 	bl	800097c <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8001696:	2028      	movs	r0, #40	; 0x28
 8001698:	f000 f8d6 	bl	8001848 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 800169c:	200c      	movs	r0, #12
 800169e:	f000 f8d3 	bl	8001848 <lcd_command>
	//-----Clear display
	lcd_clear();
 80016a2:	f000 f9e9 	bl	8001a78 <lcd_clear>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400

080016b8 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 80016c2:	4b5e      	ldr	r3, [pc, #376]	; (800183c <lcd_putc+0x184>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a5d      	ldr	r2, [pc, #372]	; (800183c <lcd_putc+0x184>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6193      	str	r3, [r2, #24]

  if ( ch & 0x10 ) {
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <lcd_putc+0x2e>
		LCD4_ON;
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <lcd_putc+0x188>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <lcd_putc+0x188>)
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	e005      	b.n	80016f2 <lcd_putc+0x3a>
	} else {
		LCD4_OFF;
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <lcd_putc+0x188>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a55      	ldr	r2, [pc, #340]	; (8001840 <lcd_putc+0x188>)
 80016ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f0:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x20 ) {
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <lcd_putc+0x52>
		LCD5_ON;
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <lcd_putc+0x188>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <lcd_putc+0x188>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	e005      	b.n	8001716 <lcd_putc+0x5e>
	} else {
    LCD5_OFF;
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <lcd_putc+0x188>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a4c      	ldr	r2, [pc, #304]	; (8001840 <lcd_putc+0x188>)
 8001710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001714:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x40 ) {
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <lcd_putc+0x76>
		LCD6_ON;
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <lcd_putc+0x188>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a46      	ldr	r2, [pc, #280]	; (8001840 <lcd_putc+0x188>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	e005      	b.n	800173a <lcd_putc+0x82>
	} else {
		LCD6_OFF;
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <lcd_putc+0x188>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a43      	ldr	r2, [pc, #268]	; (8001840 <lcd_putc+0x188>)
 8001734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001738:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x80 ) {
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	da06      	bge.n	8001750 <lcd_putc+0x98>
		LCD7_ON;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <lcd_putc+0x184>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a3d      	ldr	r2, [pc, #244]	; (800183c <lcd_putc+0x184>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	e005      	b.n	800175c <lcd_putc+0xa4>
	} else {
		LCD7_OFF;
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <lcd_putc+0x184>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a39      	ldr	r2, [pc, #228]	; (800183c <lcd_putc+0x184>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175a:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <lcd_putc+0x18c>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a38      	ldr	r2, [pc, #224]	; (8001844 <lcd_putc+0x18c>)
 8001762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001766:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 8001768:	2002      	movs	r0, #2
 800176a:	f7ff f907 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <lcd_putc+0x18c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a34      	ldr	r2, [pc, #208]	; (8001844 <lcd_putc+0x18c>)
 8001774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001778:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff f8fe 	bl	800097c <HAL_Delay>

	if ( ch & 0x01 ) {
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <lcd_putc+0xe0>
		LCD4_ON;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <lcd_putc+0x188>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <lcd_putc+0x188>)
 8001790:	f043 0320 	orr.w	r3, r3, #32
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	e005      	b.n	80017a4 <lcd_putc+0xec>
	} else {
		LCD4_OFF;
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <lcd_putc+0x188>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a28      	ldr	r2, [pc, #160]	; (8001840 <lcd_putc+0x188>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x02 ) {
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <lcd_putc+0x104>
		LCD5_ON;
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <lcd_putc+0x188>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <lcd_putc+0x188>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	e005      	b.n	80017c8 <lcd_putc+0x110>
	} else {
    LCD5_OFF;
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <lcd_putc+0x188>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <lcd_putc+0x188>)
 80017c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017c6:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x04 ) {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <lcd_putc+0x128>
		LCD6_ON;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <lcd_putc+0x188>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <lcd_putc+0x188>)
 80017d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	e005      	b.n	80017ec <lcd_putc+0x134>
	} else {
    LCD6_OFF;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <lcd_putc+0x188>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a16      	ldr	r2, [pc, #88]	; (8001840 <lcd_putc+0x188>)
 80017e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ea:	6193      	str	r3, [r2, #24]
	}
	if ( ch & 0x08 ) {
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <lcd_putc+0x14c>
		LCD7_ON;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <lcd_putc+0x184>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <lcd_putc+0x184>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	e005      	b.n	8001810 <lcd_putc+0x158>
	} else {
    LCD7_OFF;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <lcd_putc+0x184>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <lcd_putc+0x184>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <lcd_putc+0x18c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <lcd_putc+0x18c>)
 8001816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181a:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff f8ad 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <lcd_putc+0x18c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <lcd_putc+0x18c>)
 8001828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800182c:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff f8a4 	bl	800097c <HAL_Delay>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800

08001848 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8001852:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <lcd_command+0x184>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <lcd_command+0x184>)
 8001858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185c:	6193      	str	r3, [r2, #24]

	if ( cmd & 0x10 ) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <lcd_command+0x2e>
		LCD4_ON;
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <lcd_command+0x188>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <lcd_command+0x188>)
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	e005      	b.n	8001882 <lcd_command+0x3a>
	} else {
		LCD4_OFF;
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <lcd_command+0x188>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <lcd_command+0x188>)
 800187c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001880:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x20 ) {
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <lcd_command+0x52>
		LCD5_ON;
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <lcd_command+0x188>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <lcd_command+0x188>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	e005      	b.n	80018a6 <lcd_command+0x5e>
	} else {
		LCD5_OFF;
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <lcd_command+0x188>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <lcd_command+0x188>)
 80018a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018a4:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x40 ) {
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <lcd_command+0x76>
		LCD6_ON;
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <lcd_command+0x188>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <lcd_command+0x188>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	e005      	b.n	80018ca <lcd_command+0x82>
	} else {
		LCD6_OFF;
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <lcd_command+0x188>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <lcd_command+0x188>)
 80018c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018c8:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x80 ) {
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da06      	bge.n	80018e0 <lcd_command+0x98>
		LCD7_ON;
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <lcd_command+0x184>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <lcd_command+0x184>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	e005      	b.n	80018ec <lcd_command+0xa4>
	} else {
		LCD7_OFF;
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <lcd_command+0x184>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a39      	ldr	r2, [pc, #228]	; (80019cc <lcd_command+0x184>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <lcd_command+0x18c>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <lcd_command+0x18c>)
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 80018f8:	2002      	movs	r0, #2
 80018fa:	f7ff f83f 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <lcd_command+0x18c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <lcd_command+0x18c>)
 8001904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001908:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 800190a:	2002      	movs	r0, #2
 800190c:	f7ff f836 	bl	800097c <HAL_Delay>

	if ( cmd & 0x01 ) {
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <lcd_command+0xe0>
		LCD4_ON;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <lcd_command+0x188>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <lcd_command+0x188>)
 8001920:	f043 0320 	orr.w	r3, r3, #32
 8001924:	6193      	str	r3, [r2, #24]
 8001926:	e005      	b.n	8001934 <lcd_command+0xec>
	} else {
		LCD4_OFF;
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <lcd_command+0x188>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <lcd_command+0x188>)
 800192e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001932:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x02 ) {
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <lcd_command+0x104>
		LCD5_ON;
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <lcd_command+0x188>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <lcd_command+0x188>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	e005      	b.n	8001958 <lcd_command+0x110>
	} else {
		LCD5_OFF;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <lcd_command+0x188>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <lcd_command+0x188>)
 8001952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001956:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x04 ) {
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <lcd_command+0x128>
		LCD6_ON;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <lcd_command+0x188>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <lcd_command+0x188>)
 8001968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	e005      	b.n	800197c <lcd_command+0x134>
	} else {
		LCD6_OFF;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <lcd_command+0x188>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <lcd_command+0x188>)
 8001976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800197a:	6193      	str	r3, [r2, #24]
	}
	if ( cmd & 0x08 ) {
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <lcd_command+0x14c>
		LCD7_ON;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <lcd_command+0x184>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <lcd_command+0x184>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	e005      	b.n	80019a0 <lcd_command+0x158>
	} else {
		LCD7_OFF;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <lcd_command+0x184>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <lcd_command+0x184>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199e:	6193      	str	r3, [r2, #24]
	}

	LCDE_ON;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <lcd_command+0x18c>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <lcd_command+0x18c>)
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7fe ffe5 	bl	800097c <HAL_Delay>
	LCDE_OFF;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <lcd_command+0x18c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <lcd_command+0x18c>)
 80019b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019bc:	6193      	str	r3, [r2, #24]
	HAL_Delay(2);//__delay_us(300);
 80019be:	2002      	movs	r0, #2
 80019c0:	f7fe ffdc 	bl	800097c <HAL_Delay>

}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800

080019d8 <lcd_puts>:

void lcd_puts(char* data, unsigned char nBytes){	//Outputs string to LCD
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
	register unsigned char i=0;
 80019e4:	2400      	movs	r4, #0

	for(i=0; i<nBytes; i++){	// print data
 80019e6:	2400      	movs	r4, #0
 80019e8:	e009      	b.n	80019fe <lcd_puts+0x26>
		lcd_putc(data[i]);
 80019ea:	4622      	mov	r2, r4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fe60 	bl	80016b8 <lcd_putc>
	for(i=0; i<nBytes; i++){	// print data
 80019f8:	4623      	mov	r3, r4
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2dc      	uxtb	r4, r3
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	42a3      	cmp	r3, r4
 8001a02:	d8f2      	bhi.n	80019ea <lcd_puts+0x12>
	}
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d81b      	bhi.n	8001a5c <lcd_gotoxy+0x50>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <lcd_gotoxy+0x20>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a45 	.word	0x08001a45
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b2dc      	uxtb	r4, r3
 8001a42:	e00f      	b.n	8001a64 <lcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	333f      	adds	r3, #63	; 0x3f
 8001a48:	b2dc      	uxtb	r4, r3
 8001a4a:	e00b      	b.n	8001a64 <lcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3313      	adds	r3, #19
 8001a50:	b2dc      	uxtb	r4, r3
 8001a52:	e007      	b.n	8001a64 <lcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3353      	adds	r3, #83	; 0x53
 8001a58:	b2dc      	uxtb	r4, r3
 8001a5a:	e003      	b.n	8001a64 <lcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b2dc      	uxtb	r4, r3
 8001a62:	bf00      	nop
	}
	lcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 8001a64:	f064 037f 	orn	r3, r4, #127	; 0x7f
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff feec 	bl	8001848 <lcd_command>
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}

08001a78 <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff fee3 	bl	8001848 <lcd_command>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <Led_Init>:

#include <stm32f401re.h>
#include <stm32f4xx_hal.h>	//Esta libreria para que reconozca los registros

void Led_Init(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	/*GPIOA PA5 */
	RCC -> AHB1ENR |= (1<<0);		//Habilitar clock ahb1
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <Led_Init+0x64>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <Led_Init+0x64>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30

  	GPIOA -> MODER |= (1<<(2*5));	//Como salida
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <Led_Init+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <Led_Init+0x68>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
  	GPIOA -> MODER &= ~(1<<(2*5 + 1));
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <Led_Init+0x68>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <Led_Init+0x68>)
 8001aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aae:	6013      	str	r3, [r2, #0]

  	GPIOA -> OTYPER &= ~(1<<5);		//Para salida push pull
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <Led_Init+0x68>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <Led_Init+0x68>)
 8001ab6:	f023 0320 	bic.w	r3, r3, #32
 8001aba:	6053      	str	r3, [r2, #4]

  	GPIOA -> OSPEEDR &= ~((1<<11)|(1<<10));	//Velocidad 2MHz
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <Led_Init+0x68>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <Led_Init+0x68>)
 8001ac2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ac6:	6093      	str	r3, [r2, #8]

 	GPIOA -> PUPDR &= ~(1<<(2*5));	//Para resistencia pull up/down
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <Led_Init+0x68>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <Led_Init+0x68>)
 8001ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ad2:	60d3      	str	r3, [r2, #12]
 	GPIOA -> PUPDR &= ~(1<<(2*5 + 1));
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <Led_Init+0x68>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <Led_Init+0x68>)
 8001ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <Push_Init>:

void Push_Init(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= (1<<2);			//Habilitar clock PORTC
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <Push_Init+0x4c>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <Push_Init+0x4c>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOC -> MODER &= ~(1<<(2*13));		//Como entrada
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <Push_Init+0x50>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <Push_Init+0x50>)
 8001b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b0e:	6013      	str	r3, [r2, #0]
	GPIOC -> MODER &= ~(1<<(2*13 + 1));
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <Push_Init+0x50>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <Push_Init+0x50>)
 8001b16:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b1a:	6013      	str	r3, [r2, #0]

 	GPIOC -> PUPDR &= ~(1<<(2*13));		//No pull up/down
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <Push_Init+0x50>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <Push_Init+0x50>)
 8001b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b26:	60d3      	str	r3, [r2, #12]
 	GPIOC -> PUPDR &= ~(1<<(2*13 + 1));
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <Push_Init+0x50>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <Push_Init+0x50>)
 8001b2e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020800 	.word	0x40020800

08001b48 <__errno>:
 8001b48:	4b01      	ldr	r3, [pc, #4]	; (8001b50 <__errno+0x8>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000000c 	.word	0x2000000c

08001b54 <__libc_init_array>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4e0d      	ldr	r6, [pc, #52]	; (8001b8c <__libc_init_array+0x38>)
 8001b58:	4c0d      	ldr	r4, [pc, #52]	; (8001b90 <__libc_init_array+0x3c>)
 8001b5a:	1ba4      	subs	r4, r4, r6
 8001b5c:	10a4      	asrs	r4, r4, #2
 8001b5e:	2500      	movs	r5, #0
 8001b60:	42a5      	cmp	r5, r4
 8001b62:	d109      	bne.n	8001b78 <__libc_init_array+0x24>
 8001b64:	4e0b      	ldr	r6, [pc, #44]	; (8001b94 <__libc_init_array+0x40>)
 8001b66:	4c0c      	ldr	r4, [pc, #48]	; (8001b98 <__libc_init_array+0x44>)
 8001b68:	f000 fc26 	bl	80023b8 <_init>
 8001b6c:	1ba4      	subs	r4, r4, r6
 8001b6e:	10a4      	asrs	r4, r4, #2
 8001b70:	2500      	movs	r5, #0
 8001b72:	42a5      	cmp	r5, r4
 8001b74:	d105      	bne.n	8001b82 <__libc_init_array+0x2e>
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
 8001b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b7c:	4798      	blx	r3
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7ee      	b.n	8001b60 <__libc_init_array+0xc>
 8001b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b86:	4798      	blx	r3
 8001b88:	3501      	adds	r5, #1
 8001b8a:	e7f2      	b.n	8001b72 <__libc_init_array+0x1e>
 8001b8c:	08002444 	.word	0x08002444
 8001b90:	08002444 	.word	0x08002444
 8001b94:	08002444 	.word	0x08002444
 8001b98:	08002448 	.word	0x08002448

08001b9c <memset>:
 8001b9c:	4402      	add	r2, r0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <memset+0xa>
 8001ba4:	4770      	bx	lr
 8001ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8001baa:	e7f9      	b.n	8001ba0 <memset+0x4>

08001bac <siprintf>:
 8001bac:	b40e      	push	{r1, r2, r3}
 8001bae:	b500      	push	{lr}
 8001bb0:	b09c      	sub	sp, #112	; 0x70
 8001bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8001bb4:	9002      	str	r0, [sp, #8]
 8001bb6:	9006      	str	r0, [sp, #24]
 8001bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <siprintf+0x38>)
 8001bbe:	9107      	str	r1, [sp, #28]
 8001bc0:	9104      	str	r1, [sp, #16]
 8001bc2:	4909      	ldr	r1, [pc, #36]	; (8001be8 <siprintf+0x3c>)
 8001bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bc8:	9105      	str	r1, [sp, #20]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	a902      	add	r1, sp, #8
 8001bd0:	f000 f866 	bl	8001ca0 <_svfiprintf_r>
 8001bd4:	9b02      	ldr	r3, [sp, #8]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	b01c      	add	sp, #112	; 0x70
 8001bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001be0:	b003      	add	sp, #12
 8001be2:	4770      	bx	lr
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	ffff0208 	.word	0xffff0208

08001bec <__ssputs_r>:
 8001bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf0:	688e      	ldr	r6, [r1, #8]
 8001bf2:	429e      	cmp	r6, r3
 8001bf4:	4682      	mov	sl, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	d837      	bhi.n	8001c6e <__ssputs_r+0x82>
 8001bfe:	898a      	ldrh	r2, [r1, #12]
 8001c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c04:	d031      	beq.n	8001c6a <__ssputs_r+0x7e>
 8001c06:	6825      	ldr	r5, [r4, #0]
 8001c08:	6909      	ldr	r1, [r1, #16]
 8001c0a:	1a6f      	subs	r7, r5, r1
 8001c0c:	6965      	ldr	r5, [r4, #20]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c14:	fb95 f5f3 	sdiv	r5, r5, r3
 8001c18:	f109 0301 	add.w	r3, r9, #1
 8001c1c:	443b      	add	r3, r7
 8001c1e:	429d      	cmp	r5, r3
 8001c20:	bf38      	it	cc
 8001c22:	461d      	movcc	r5, r3
 8001c24:	0553      	lsls	r3, r2, #21
 8001c26:	d530      	bpl.n	8001c8a <__ssputs_r+0x9e>
 8001c28:	4629      	mov	r1, r5
 8001c2a:	f000 fb2b 	bl	8002284 <_malloc_r>
 8001c2e:	4606      	mov	r6, r0
 8001c30:	b950      	cbnz	r0, 8001c48 <__ssputs_r+0x5c>
 8001c32:	230c      	movs	r3, #12
 8001c34:	f8ca 3000 	str.w	r3, [sl]
 8001c38:	89a3      	ldrh	r3, [r4, #12]
 8001c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c48:	463a      	mov	r2, r7
 8001c4a:	6921      	ldr	r1, [r4, #16]
 8001c4c:	f000 faa8 	bl	80021a0 <memcpy>
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5a:	81a3      	strh	r3, [r4, #12]
 8001c5c:	6126      	str	r6, [r4, #16]
 8001c5e:	6165      	str	r5, [r4, #20]
 8001c60:	443e      	add	r6, r7
 8001c62:	1bed      	subs	r5, r5, r7
 8001c64:	6026      	str	r6, [r4, #0]
 8001c66:	60a5      	str	r5, [r4, #8]
 8001c68:	464e      	mov	r6, r9
 8001c6a:	454e      	cmp	r6, r9
 8001c6c:	d900      	bls.n	8001c70 <__ssputs_r+0x84>
 8001c6e:	464e      	mov	r6, r9
 8001c70:	4632      	mov	r2, r6
 8001c72:	4641      	mov	r1, r8
 8001c74:	6820      	ldr	r0, [r4, #0]
 8001c76:	f000 fa9e 	bl	80021b6 <memmove>
 8001c7a:	68a3      	ldr	r3, [r4, #8]
 8001c7c:	1b9b      	subs	r3, r3, r6
 8001c7e:	60a3      	str	r3, [r4, #8]
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	441e      	add	r6, r3
 8001c84:	6026      	str	r6, [r4, #0]
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7dc      	b.n	8001c44 <__ssputs_r+0x58>
 8001c8a:	462a      	mov	r2, r5
 8001c8c:	f000 fb54 	bl	8002338 <_realloc_r>
 8001c90:	4606      	mov	r6, r0
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1e2      	bne.n	8001c5c <__ssputs_r+0x70>
 8001c96:	6921      	ldr	r1, [r4, #16]
 8001c98:	4650      	mov	r0, sl
 8001c9a:	f000 faa5 	bl	80021e8 <_free_r>
 8001c9e:	e7c8      	b.n	8001c32 <__ssputs_r+0x46>

08001ca0 <_svfiprintf_r>:
 8001ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	898b      	ldrh	r3, [r1, #12]
 8001ca8:	061f      	lsls	r7, r3, #24
 8001caa:	b09d      	sub	sp, #116	; 0x74
 8001cac:	4680      	mov	r8, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4616      	mov	r6, r2
 8001cb2:	d50f      	bpl.n	8001cd4 <_svfiprintf_r+0x34>
 8001cb4:	690b      	ldr	r3, [r1, #16]
 8001cb6:	b96b      	cbnz	r3, 8001cd4 <_svfiprintf_r+0x34>
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	f000 fae3 	bl	8002284 <_malloc_r>
 8001cbe:	6020      	str	r0, [r4, #0]
 8001cc0:	6120      	str	r0, [r4, #16]
 8001cc2:	b928      	cbnz	r0, 8001cd0 <_svfiprintf_r+0x30>
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	f8c8 3000 	str.w	r3, [r8]
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	e0c8      	b.n	8001e62 <_svfiprintf_r+0x1c2>
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	6163      	str	r3, [r4, #20]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd8:	2320      	movs	r3, #32
 8001cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cde:	2330      	movs	r3, #48	; 0x30
 8001ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ce4:	9503      	str	r5, [sp, #12]
 8001ce6:	f04f 0b01 	mov.w	fp, #1
 8001cea:	4637      	mov	r7, r6
 8001cec:	463d      	mov	r5, r7
 8001cee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cf2:	b10b      	cbz	r3, 8001cf8 <_svfiprintf_r+0x58>
 8001cf4:	2b25      	cmp	r3, #37	; 0x25
 8001cf6:	d13e      	bne.n	8001d76 <_svfiprintf_r+0xd6>
 8001cf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cfc:	d00b      	beq.n	8001d16 <_svfiprintf_r+0x76>
 8001cfe:	4653      	mov	r3, sl
 8001d00:	4632      	mov	r2, r6
 8001d02:	4621      	mov	r1, r4
 8001d04:	4640      	mov	r0, r8
 8001d06:	f7ff ff71 	bl	8001bec <__ssputs_r>
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	f000 80a4 	beq.w	8001e58 <_svfiprintf_r+0x1b8>
 8001d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d12:	4453      	add	r3, sl
 8001d14:	9309      	str	r3, [sp, #36]	; 0x24
 8001d16:	783b      	ldrb	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 809d 	beq.w	8001e58 <_svfiprintf_r+0x1b8>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d28:	9304      	str	r3, [sp, #16]
 8001d2a:	9307      	str	r3, [sp, #28]
 8001d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d30:	931a      	str	r3, [sp, #104]	; 0x68
 8001d32:	462f      	mov	r7, r5
 8001d34:	2205      	movs	r2, #5
 8001d36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d3a:	4850      	ldr	r0, [pc, #320]	; (8001e7c <_svfiprintf_r+0x1dc>)
 8001d3c:	f7fe fa58 	bl	80001f0 <memchr>
 8001d40:	9b04      	ldr	r3, [sp, #16]
 8001d42:	b9d0      	cbnz	r0, 8001d7a <_svfiprintf_r+0xda>
 8001d44:	06d9      	lsls	r1, r3, #27
 8001d46:	bf44      	itt	mi
 8001d48:	2220      	movmi	r2, #32
 8001d4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d4e:	071a      	lsls	r2, r3, #28
 8001d50:	bf44      	itt	mi
 8001d52:	222b      	movmi	r2, #43	; 0x2b
 8001d54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d58:	782a      	ldrb	r2, [r5, #0]
 8001d5a:	2a2a      	cmp	r2, #42	; 0x2a
 8001d5c:	d015      	beq.n	8001d8a <_svfiprintf_r+0xea>
 8001d5e:	9a07      	ldr	r2, [sp, #28]
 8001d60:	462f      	mov	r7, r5
 8001d62:	2000      	movs	r0, #0
 8001d64:	250a      	movs	r5, #10
 8001d66:	4639      	mov	r1, r7
 8001d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d6c:	3b30      	subs	r3, #48	; 0x30
 8001d6e:	2b09      	cmp	r3, #9
 8001d70:	d94d      	bls.n	8001e0e <_svfiprintf_r+0x16e>
 8001d72:	b1b8      	cbz	r0, 8001da4 <_svfiprintf_r+0x104>
 8001d74:	e00f      	b.n	8001d96 <_svfiprintf_r+0xf6>
 8001d76:	462f      	mov	r7, r5
 8001d78:	e7b8      	b.n	8001cec <_svfiprintf_r+0x4c>
 8001d7a:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <_svfiprintf_r+0x1dc>)
 8001d7c:	1a80      	subs	r0, r0, r2
 8001d7e:	fa0b f000 	lsl.w	r0, fp, r0
 8001d82:	4318      	orrs	r0, r3
 8001d84:	9004      	str	r0, [sp, #16]
 8001d86:	463d      	mov	r5, r7
 8001d88:	e7d3      	b.n	8001d32 <_svfiprintf_r+0x92>
 8001d8a:	9a03      	ldr	r2, [sp, #12]
 8001d8c:	1d11      	adds	r1, r2, #4
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	9103      	str	r1, [sp, #12]
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	db01      	blt.n	8001d9a <_svfiprintf_r+0xfa>
 8001d96:	9207      	str	r2, [sp, #28]
 8001d98:	e004      	b.n	8001da4 <_svfiprintf_r+0x104>
 8001d9a:	4252      	negs	r2, r2
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	9207      	str	r2, [sp, #28]
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	783b      	ldrb	r3, [r7, #0]
 8001da6:	2b2e      	cmp	r3, #46	; 0x2e
 8001da8:	d10c      	bne.n	8001dc4 <_svfiprintf_r+0x124>
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b2a      	cmp	r3, #42	; 0x2a
 8001dae:	d133      	bne.n	8001e18 <_svfiprintf_r+0x178>
 8001db0:	9b03      	ldr	r3, [sp, #12]
 8001db2:	1d1a      	adds	r2, r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	9203      	str	r2, [sp, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bfb8      	it	lt
 8001dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001dc0:	3702      	adds	r7, #2
 8001dc2:	9305      	str	r3, [sp, #20]
 8001dc4:	4d2e      	ldr	r5, [pc, #184]	; (8001e80 <_svfiprintf_r+0x1e0>)
 8001dc6:	7839      	ldrb	r1, [r7, #0]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7fe fa10 	bl	80001f0 <memchr>
 8001dd0:	b138      	cbz	r0, 8001de2 <_svfiprintf_r+0x142>
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	1b40      	subs	r0, r0, r5
 8001dd6:	fa03 f000 	lsl.w	r0, r3, r0
 8001dda:	9b04      	ldr	r3, [sp, #16]
 8001ddc:	4303      	orrs	r3, r0
 8001dde:	3701      	adds	r7, #1
 8001de0:	9304      	str	r3, [sp, #16]
 8001de2:	7839      	ldrb	r1, [r7, #0]
 8001de4:	4827      	ldr	r0, [pc, #156]	; (8001e84 <_svfiprintf_r+0x1e4>)
 8001de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dea:	2206      	movs	r2, #6
 8001dec:	1c7e      	adds	r6, r7, #1
 8001dee:	f7fe f9ff 	bl	80001f0 <memchr>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d038      	beq.n	8001e68 <_svfiprintf_r+0x1c8>
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <_svfiprintf_r+0x1e8>)
 8001df8:	bb13      	cbnz	r3, 8001e40 <_svfiprintf_r+0x1a0>
 8001dfa:	9b03      	ldr	r3, [sp, #12]
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	f023 0307 	bic.w	r3, r3, #7
 8001e02:	3308      	adds	r3, #8
 8001e04:	9303      	str	r3, [sp, #12]
 8001e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e08:	444b      	add	r3, r9
 8001e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e0c:	e76d      	b.n	8001cea <_svfiprintf_r+0x4a>
 8001e0e:	fb05 3202 	mla	r2, r5, r2, r3
 8001e12:	2001      	movs	r0, #1
 8001e14:	460f      	mov	r7, r1
 8001e16:	e7a6      	b.n	8001d66 <_svfiprintf_r+0xc6>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	3701      	adds	r7, #1
 8001e1c:	9305      	str	r3, [sp, #20]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	250a      	movs	r5, #10
 8001e22:	4638      	mov	r0, r7
 8001e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e28:	3a30      	subs	r2, #48	; 0x30
 8001e2a:	2a09      	cmp	r2, #9
 8001e2c:	d903      	bls.n	8001e36 <_svfiprintf_r+0x196>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0c8      	beq.n	8001dc4 <_svfiprintf_r+0x124>
 8001e32:	9105      	str	r1, [sp, #20]
 8001e34:	e7c6      	b.n	8001dc4 <_svfiprintf_r+0x124>
 8001e36:	fb05 2101 	mla	r1, r5, r1, r2
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4607      	mov	r7, r0
 8001e3e:	e7f0      	b.n	8001e22 <_svfiprintf_r+0x182>
 8001e40:	ab03      	add	r3, sp, #12
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4622      	mov	r2, r4
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_svfiprintf_r+0x1ec>)
 8001e48:	a904      	add	r1, sp, #16
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	f3af 8000 	nop.w
 8001e50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e54:	4681      	mov	r9, r0
 8001e56:	d1d6      	bne.n	8001e06 <_svfiprintf_r+0x166>
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	065b      	lsls	r3, r3, #25
 8001e5c:	f53f af35 	bmi.w	8001cca <_svfiprintf_r+0x2a>
 8001e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e62:	b01d      	add	sp, #116	; 0x74
 8001e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e68:	ab03      	add	r3, sp, #12
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <_svfiprintf_r+0x1ec>)
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	4640      	mov	r0, r8
 8001e74:	f000 f882 	bl	8001f7c <_printf_i>
 8001e78:	e7ea      	b.n	8001e50 <_svfiprintf_r+0x1b0>
 8001e7a:	bf00      	nop
 8001e7c:	08002408 	.word	0x08002408
 8001e80:	0800240e 	.word	0x0800240e
 8001e84:	08002412 	.word	0x08002412
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	08001bed 	.word	0x08001bed

08001e90 <_printf_common>:
 8001e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e94:	4691      	mov	r9, r2
 8001e96:	461f      	mov	r7, r3
 8001e98:	688a      	ldr	r2, [r1, #8]
 8001e9a:	690b      	ldr	r3, [r1, #16]
 8001e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bfb8      	it	lt
 8001ea4:	4613      	movlt	r3, r2
 8001ea6:	f8c9 3000 	str.w	r3, [r9]
 8001eaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eae:	4606      	mov	r6, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	b112      	cbz	r2, 8001eba <_printf_common+0x2a>
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c9 3000 	str.w	r3, [r9]
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	0699      	lsls	r1, r3, #26
 8001ebe:	bf42      	ittt	mi
 8001ec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ec4:	3302      	addmi	r3, #2
 8001ec6:	f8c9 3000 	strmi.w	r3, [r9]
 8001eca:	6825      	ldr	r5, [r4, #0]
 8001ecc:	f015 0506 	ands.w	r5, r5, #6
 8001ed0:	d107      	bne.n	8001ee2 <_printf_common+0x52>
 8001ed2:	f104 0a19 	add.w	sl, r4, #25
 8001ed6:	68e3      	ldr	r3, [r4, #12]
 8001ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	42ab      	cmp	r3, r5
 8001ee0:	dc28      	bgt.n	8001f34 <_printf_common+0xa4>
 8001ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	3300      	adds	r3, #0
 8001eea:	bf18      	it	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	0692      	lsls	r2, r2, #26
 8001ef0:	d42d      	bmi.n	8001f4e <_printf_common+0xbe>
 8001ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef6:	4639      	mov	r1, r7
 8001ef8:	4630      	mov	r0, r6
 8001efa:	47c0      	blx	r8
 8001efc:	3001      	adds	r0, #1
 8001efe:	d020      	beq.n	8001f42 <_printf_common+0xb2>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	68e5      	ldr	r5, [r4, #12]
 8001f04:	f8d9 2000 	ldr.w	r2, [r9]
 8001f08:	f003 0306 	and.w	r3, r3, #6
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	bf08      	it	eq
 8001f10:	1aad      	subeq	r5, r5, r2
 8001f12:	68a3      	ldr	r3, [r4, #8]
 8001f14:	6922      	ldr	r2, [r4, #16]
 8001f16:	bf0c      	ite	eq
 8001f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f1c:	2500      	movne	r5, #0
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bfc4      	itt	gt
 8001f22:	1a9b      	subgt	r3, r3, r2
 8001f24:	18ed      	addgt	r5, r5, r3
 8001f26:	f04f 0900 	mov.w	r9, #0
 8001f2a:	341a      	adds	r4, #26
 8001f2c:	454d      	cmp	r5, r9
 8001f2e:	d11a      	bne.n	8001f66 <_printf_common+0xd6>
 8001f30:	2000      	movs	r0, #0
 8001f32:	e008      	b.n	8001f46 <_printf_common+0xb6>
 8001f34:	2301      	movs	r3, #1
 8001f36:	4652      	mov	r2, sl
 8001f38:	4639      	mov	r1, r7
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	47c0      	blx	r8
 8001f3e:	3001      	adds	r0, #1
 8001f40:	d103      	bne.n	8001f4a <_printf_common+0xba>
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f4a:	3501      	adds	r5, #1
 8001f4c:	e7c3      	b.n	8001ed6 <_printf_common+0x46>
 8001f4e:	18e1      	adds	r1, r4, r3
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	2030      	movs	r0, #48	; 0x30
 8001f54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f58:	4422      	add	r2, r4
 8001f5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f62:	3302      	adds	r3, #2
 8001f64:	e7c5      	b.n	8001ef2 <_printf_common+0x62>
 8001f66:	2301      	movs	r3, #1
 8001f68:	4622      	mov	r2, r4
 8001f6a:	4639      	mov	r1, r7
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	47c0      	blx	r8
 8001f70:	3001      	adds	r0, #1
 8001f72:	d0e6      	beq.n	8001f42 <_printf_common+0xb2>
 8001f74:	f109 0901 	add.w	r9, r9, #1
 8001f78:	e7d8      	b.n	8001f2c <_printf_common+0x9c>
	...

08001f7c <_printf_i>:
 8001f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f84:	460c      	mov	r4, r1
 8001f86:	7e09      	ldrb	r1, [r1, #24]
 8001f88:	b085      	sub	sp, #20
 8001f8a:	296e      	cmp	r1, #110	; 0x6e
 8001f8c:	4617      	mov	r7, r2
 8001f8e:	4606      	mov	r6, r0
 8001f90:	4698      	mov	r8, r3
 8001f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f94:	f000 80b3 	beq.w	80020fe <_printf_i+0x182>
 8001f98:	d822      	bhi.n	8001fe0 <_printf_i+0x64>
 8001f9a:	2963      	cmp	r1, #99	; 0x63
 8001f9c:	d036      	beq.n	800200c <_printf_i+0x90>
 8001f9e:	d80a      	bhi.n	8001fb6 <_printf_i+0x3a>
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	f000 80b9 	beq.w	8002118 <_printf_i+0x19c>
 8001fa6:	2958      	cmp	r1, #88	; 0x58
 8001fa8:	f000 8083 	beq.w	80020b2 <_printf_i+0x136>
 8001fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fb4:	e032      	b.n	800201c <_printf_i+0xa0>
 8001fb6:	2964      	cmp	r1, #100	; 0x64
 8001fb8:	d001      	beq.n	8001fbe <_printf_i+0x42>
 8001fba:	2969      	cmp	r1, #105	; 0x69
 8001fbc:	d1f6      	bne.n	8001fac <_printf_i+0x30>
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	0605      	lsls	r5, r0, #24
 8001fc4:	f103 0104 	add.w	r1, r3, #4
 8001fc8:	d52a      	bpl.n	8002020 <_printf_i+0xa4>
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6011      	str	r1, [r2, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da03      	bge.n	8001fda <_printf_i+0x5e>
 8001fd2:	222d      	movs	r2, #45	; 0x2d
 8001fd4:	425b      	negs	r3, r3
 8001fd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fda:	486f      	ldr	r0, [pc, #444]	; (8002198 <_printf_i+0x21c>)
 8001fdc:	220a      	movs	r2, #10
 8001fde:	e039      	b.n	8002054 <_printf_i+0xd8>
 8001fe0:	2973      	cmp	r1, #115	; 0x73
 8001fe2:	f000 809d 	beq.w	8002120 <_printf_i+0x1a4>
 8001fe6:	d808      	bhi.n	8001ffa <_printf_i+0x7e>
 8001fe8:	296f      	cmp	r1, #111	; 0x6f
 8001fea:	d020      	beq.n	800202e <_printf_i+0xb2>
 8001fec:	2970      	cmp	r1, #112	; 0x70
 8001fee:	d1dd      	bne.n	8001fac <_printf_i+0x30>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	f043 0320 	orr.w	r3, r3, #32
 8001ff6:	6023      	str	r3, [r4, #0]
 8001ff8:	e003      	b.n	8002002 <_printf_i+0x86>
 8001ffa:	2975      	cmp	r1, #117	; 0x75
 8001ffc:	d017      	beq.n	800202e <_printf_i+0xb2>
 8001ffe:	2978      	cmp	r1, #120	; 0x78
 8002000:	d1d4      	bne.n	8001fac <_printf_i+0x30>
 8002002:	2378      	movs	r3, #120	; 0x78
 8002004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002008:	4864      	ldr	r0, [pc, #400]	; (800219c <_printf_i+0x220>)
 800200a:	e055      	b.n	80020b8 <_printf_i+0x13c>
 800200c:	6813      	ldr	r3, [r2, #0]
 800200e:	1d19      	adds	r1, r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6011      	str	r1, [r2, #0]
 8002014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800201c:	2301      	movs	r3, #1
 800201e:	e08c      	b.n	800213a <_printf_i+0x1be>
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6011      	str	r1, [r2, #0]
 8002024:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002028:	bf18      	it	ne
 800202a:	b21b      	sxthne	r3, r3
 800202c:	e7cf      	b.n	8001fce <_printf_i+0x52>
 800202e:	6813      	ldr	r3, [r2, #0]
 8002030:	6825      	ldr	r5, [r4, #0]
 8002032:	1d18      	adds	r0, r3, #4
 8002034:	6010      	str	r0, [r2, #0]
 8002036:	0628      	lsls	r0, r5, #24
 8002038:	d501      	bpl.n	800203e <_printf_i+0xc2>
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e002      	b.n	8002044 <_printf_i+0xc8>
 800203e:	0668      	lsls	r0, r5, #25
 8002040:	d5fb      	bpl.n	800203a <_printf_i+0xbe>
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4854      	ldr	r0, [pc, #336]	; (8002198 <_printf_i+0x21c>)
 8002046:	296f      	cmp	r1, #111	; 0x6f
 8002048:	bf14      	ite	ne
 800204a:	220a      	movne	r2, #10
 800204c:	2208      	moveq	r2, #8
 800204e:	2100      	movs	r1, #0
 8002050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002054:	6865      	ldr	r5, [r4, #4]
 8002056:	60a5      	str	r5, [r4, #8]
 8002058:	2d00      	cmp	r5, #0
 800205a:	f2c0 8095 	blt.w	8002188 <_printf_i+0x20c>
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	f021 0104 	bic.w	r1, r1, #4
 8002064:	6021      	str	r1, [r4, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d13d      	bne.n	80020e6 <_printf_i+0x16a>
 800206a:	2d00      	cmp	r5, #0
 800206c:	f040 808e 	bne.w	800218c <_printf_i+0x210>
 8002070:	4665      	mov	r5, ip
 8002072:	2a08      	cmp	r2, #8
 8002074:	d10b      	bne.n	800208e <_printf_i+0x112>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	07db      	lsls	r3, r3, #31
 800207a:	d508      	bpl.n	800208e <_printf_i+0x112>
 800207c:	6923      	ldr	r3, [r4, #16]
 800207e:	6862      	ldr	r2, [r4, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	bfde      	ittt	le
 8002084:	2330      	movle	r3, #48	; 0x30
 8002086:	f805 3c01 	strble.w	r3, [r5, #-1]
 800208a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800208e:	ebac 0305 	sub.w	r3, ip, r5
 8002092:	6123      	str	r3, [r4, #16]
 8002094:	f8cd 8000 	str.w	r8, [sp]
 8002098:	463b      	mov	r3, r7
 800209a:	aa03      	add	r2, sp, #12
 800209c:	4621      	mov	r1, r4
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff fef6 	bl	8001e90 <_printf_common>
 80020a4:	3001      	adds	r0, #1
 80020a6:	d14d      	bne.n	8002144 <_printf_i+0x1c8>
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	b005      	add	sp, #20
 80020ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020b2:	4839      	ldr	r0, [pc, #228]	; (8002198 <_printf_i+0x21c>)
 80020b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	6821      	ldr	r1, [r4, #0]
 80020bc:	1d1d      	adds	r5, r3, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6015      	str	r5, [r2, #0]
 80020c2:	060a      	lsls	r2, r1, #24
 80020c4:	d50b      	bpl.n	80020de <_printf_i+0x162>
 80020c6:	07ca      	lsls	r2, r1, #31
 80020c8:	bf44      	itt	mi
 80020ca:	f041 0120 	orrmi.w	r1, r1, #32
 80020ce:	6021      	strmi	r1, [r4, #0]
 80020d0:	b91b      	cbnz	r3, 80020da <_printf_i+0x15e>
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	f022 0220 	bic.w	r2, r2, #32
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	2210      	movs	r2, #16
 80020dc:	e7b7      	b.n	800204e <_printf_i+0xd2>
 80020de:	064d      	lsls	r5, r1, #25
 80020e0:	bf48      	it	mi
 80020e2:	b29b      	uxthmi	r3, r3
 80020e4:	e7ef      	b.n	80020c6 <_printf_i+0x14a>
 80020e6:	4665      	mov	r5, ip
 80020e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020ec:	fb02 3311 	mls	r3, r2, r1, r3
 80020f0:	5cc3      	ldrb	r3, [r0, r3]
 80020f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020f6:	460b      	mov	r3, r1
 80020f8:	2900      	cmp	r1, #0
 80020fa:	d1f5      	bne.n	80020e8 <_printf_i+0x16c>
 80020fc:	e7b9      	b.n	8002072 <_printf_i+0xf6>
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	6825      	ldr	r5, [r4, #0]
 8002102:	6961      	ldr	r1, [r4, #20]
 8002104:	1d18      	adds	r0, r3, #4
 8002106:	6010      	str	r0, [r2, #0]
 8002108:	0628      	lsls	r0, r5, #24
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	d501      	bpl.n	8002112 <_printf_i+0x196>
 800210e:	6019      	str	r1, [r3, #0]
 8002110:	e002      	b.n	8002118 <_printf_i+0x19c>
 8002112:	066a      	lsls	r2, r5, #25
 8002114:	d5fb      	bpl.n	800210e <_printf_i+0x192>
 8002116:	8019      	strh	r1, [r3, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	6123      	str	r3, [r4, #16]
 800211c:	4665      	mov	r5, ip
 800211e:	e7b9      	b.n	8002094 <_printf_i+0x118>
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	1d19      	adds	r1, r3, #4
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	681d      	ldr	r5, [r3, #0]
 8002128:	6862      	ldr	r2, [r4, #4]
 800212a:	2100      	movs	r1, #0
 800212c:	4628      	mov	r0, r5
 800212e:	f7fe f85f 	bl	80001f0 <memchr>
 8002132:	b108      	cbz	r0, 8002138 <_printf_i+0x1bc>
 8002134:	1b40      	subs	r0, r0, r5
 8002136:	6060      	str	r0, [r4, #4]
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	6123      	str	r3, [r4, #16]
 800213c:	2300      	movs	r3, #0
 800213e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002142:	e7a7      	b.n	8002094 <_printf_i+0x118>
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	462a      	mov	r2, r5
 8002148:	4639      	mov	r1, r7
 800214a:	4630      	mov	r0, r6
 800214c:	47c0      	blx	r8
 800214e:	3001      	adds	r0, #1
 8002150:	d0aa      	beq.n	80020a8 <_printf_i+0x12c>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	079b      	lsls	r3, r3, #30
 8002156:	d413      	bmi.n	8002180 <_printf_i+0x204>
 8002158:	68e0      	ldr	r0, [r4, #12]
 800215a:	9b03      	ldr	r3, [sp, #12]
 800215c:	4298      	cmp	r0, r3
 800215e:	bfb8      	it	lt
 8002160:	4618      	movlt	r0, r3
 8002162:	e7a3      	b.n	80020ac <_printf_i+0x130>
 8002164:	2301      	movs	r3, #1
 8002166:	464a      	mov	r2, r9
 8002168:	4639      	mov	r1, r7
 800216a:	4630      	mov	r0, r6
 800216c:	47c0      	blx	r8
 800216e:	3001      	adds	r0, #1
 8002170:	d09a      	beq.n	80020a8 <_printf_i+0x12c>
 8002172:	3501      	adds	r5, #1
 8002174:	68e3      	ldr	r3, [r4, #12]
 8002176:	9a03      	ldr	r2, [sp, #12]
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	42ab      	cmp	r3, r5
 800217c:	dcf2      	bgt.n	8002164 <_printf_i+0x1e8>
 800217e:	e7eb      	b.n	8002158 <_printf_i+0x1dc>
 8002180:	2500      	movs	r5, #0
 8002182:	f104 0919 	add.w	r9, r4, #25
 8002186:	e7f5      	b.n	8002174 <_printf_i+0x1f8>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ac      	bne.n	80020e6 <_printf_i+0x16a>
 800218c:	7803      	ldrb	r3, [r0, #0]
 800218e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002192:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002196:	e76c      	b.n	8002072 <_printf_i+0xf6>
 8002198:	08002419 	.word	0x08002419
 800219c:	0800242a 	.word	0x0800242a

080021a0 <memcpy>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	1e43      	subs	r3, r0, #1
 80021a4:	440a      	add	r2, r1
 80021a6:	4291      	cmp	r1, r2
 80021a8:	d100      	bne.n	80021ac <memcpy+0xc>
 80021aa:	bd10      	pop	{r4, pc}
 80021ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021b4:	e7f7      	b.n	80021a6 <memcpy+0x6>

080021b6 <memmove>:
 80021b6:	4288      	cmp	r0, r1
 80021b8:	b510      	push	{r4, lr}
 80021ba:	eb01 0302 	add.w	r3, r1, r2
 80021be:	d807      	bhi.n	80021d0 <memmove+0x1a>
 80021c0:	1e42      	subs	r2, r0, #1
 80021c2:	4299      	cmp	r1, r3
 80021c4:	d00a      	beq.n	80021dc <memmove+0x26>
 80021c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021ce:	e7f8      	b.n	80021c2 <memmove+0xc>
 80021d0:	4283      	cmp	r3, r0
 80021d2:	d9f5      	bls.n	80021c0 <memmove+0xa>
 80021d4:	1881      	adds	r1, r0, r2
 80021d6:	1ad2      	subs	r2, r2, r3
 80021d8:	42d3      	cmn	r3, r2
 80021da:	d100      	bne.n	80021de <memmove+0x28>
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021e6:	e7f7      	b.n	80021d8 <memmove+0x22>

080021e8 <_free_r>:
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	4605      	mov	r5, r0
 80021ec:	2900      	cmp	r1, #0
 80021ee:	d045      	beq.n	800227c <_free_r+0x94>
 80021f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021f4:	1f0c      	subs	r4, r1, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bfb8      	it	lt
 80021fa:	18e4      	addlt	r4, r4, r3
 80021fc:	f000 f8d2 	bl	80023a4 <__malloc_lock>
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <_free_r+0x98>)
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	4610      	mov	r0, r2
 8002206:	b933      	cbnz	r3, 8002216 <_free_r+0x2e>
 8002208:	6063      	str	r3, [r4, #4]
 800220a:	6014      	str	r4, [r2, #0]
 800220c:	4628      	mov	r0, r5
 800220e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002212:	f000 b8c8 	b.w	80023a6 <__malloc_unlock>
 8002216:	42a3      	cmp	r3, r4
 8002218:	d90c      	bls.n	8002234 <_free_r+0x4c>
 800221a:	6821      	ldr	r1, [r4, #0]
 800221c:	1862      	adds	r2, r4, r1
 800221e:	4293      	cmp	r3, r2
 8002220:	bf04      	itt	eq
 8002222:	681a      	ldreq	r2, [r3, #0]
 8002224:	685b      	ldreq	r3, [r3, #4]
 8002226:	6063      	str	r3, [r4, #4]
 8002228:	bf04      	itt	eq
 800222a:	1852      	addeq	r2, r2, r1
 800222c:	6022      	streq	r2, [r4, #0]
 800222e:	6004      	str	r4, [r0, #0]
 8002230:	e7ec      	b.n	800220c <_free_r+0x24>
 8002232:	4613      	mov	r3, r2
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	b10a      	cbz	r2, 800223c <_free_r+0x54>
 8002238:	42a2      	cmp	r2, r4
 800223a:	d9fa      	bls.n	8002232 <_free_r+0x4a>
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	1858      	adds	r0, r3, r1
 8002240:	42a0      	cmp	r0, r4
 8002242:	d10b      	bne.n	800225c <_free_r+0x74>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	4401      	add	r1, r0
 8002248:	1858      	adds	r0, r3, r1
 800224a:	4282      	cmp	r2, r0
 800224c:	6019      	str	r1, [r3, #0]
 800224e:	d1dd      	bne.n	800220c <_free_r+0x24>
 8002250:	6810      	ldr	r0, [r2, #0]
 8002252:	6852      	ldr	r2, [r2, #4]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	4401      	add	r1, r0
 8002258:	6019      	str	r1, [r3, #0]
 800225a:	e7d7      	b.n	800220c <_free_r+0x24>
 800225c:	d902      	bls.n	8002264 <_free_r+0x7c>
 800225e:	230c      	movs	r3, #12
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	e7d3      	b.n	800220c <_free_r+0x24>
 8002264:	6820      	ldr	r0, [r4, #0]
 8002266:	1821      	adds	r1, r4, r0
 8002268:	428a      	cmp	r2, r1
 800226a:	bf04      	itt	eq
 800226c:	6811      	ldreq	r1, [r2, #0]
 800226e:	6852      	ldreq	r2, [r2, #4]
 8002270:	6062      	str	r2, [r4, #4]
 8002272:	bf04      	itt	eq
 8002274:	1809      	addeq	r1, r1, r0
 8002276:	6021      	streq	r1, [r4, #0]
 8002278:	605c      	str	r4, [r3, #4]
 800227a:	e7c7      	b.n	800220c <_free_r+0x24>
 800227c:	bd38      	pop	{r3, r4, r5, pc}
 800227e:	bf00      	nop
 8002280:	20000090 	.word	0x20000090

08002284 <_malloc_r>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	1ccd      	adds	r5, r1, #3
 8002288:	f025 0503 	bic.w	r5, r5, #3
 800228c:	3508      	adds	r5, #8
 800228e:	2d0c      	cmp	r5, #12
 8002290:	bf38      	it	cc
 8002292:	250c      	movcc	r5, #12
 8002294:	2d00      	cmp	r5, #0
 8002296:	4606      	mov	r6, r0
 8002298:	db01      	blt.n	800229e <_malloc_r+0x1a>
 800229a:	42a9      	cmp	r1, r5
 800229c:	d903      	bls.n	80022a6 <_malloc_r+0x22>
 800229e:	230c      	movs	r3, #12
 80022a0:	6033      	str	r3, [r6, #0]
 80022a2:	2000      	movs	r0, #0
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
 80022a6:	f000 f87d 	bl	80023a4 <__malloc_lock>
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <_malloc_r+0xac>)
 80022ac:	6814      	ldr	r4, [r2, #0]
 80022ae:	4621      	mov	r1, r4
 80022b0:	b991      	cbnz	r1, 80022d8 <_malloc_r+0x54>
 80022b2:	4c20      	ldr	r4, [pc, #128]	; (8002334 <_malloc_r+0xb0>)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	b91b      	cbnz	r3, 80022c0 <_malloc_r+0x3c>
 80022b8:	4630      	mov	r0, r6
 80022ba:	f000 f863 	bl	8002384 <_sbrk_r>
 80022be:	6020      	str	r0, [r4, #0]
 80022c0:	4629      	mov	r1, r5
 80022c2:	4630      	mov	r0, r6
 80022c4:	f000 f85e 	bl	8002384 <_sbrk_r>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d124      	bne.n	8002316 <_malloc_r+0x92>
 80022cc:	230c      	movs	r3, #12
 80022ce:	6033      	str	r3, [r6, #0]
 80022d0:	4630      	mov	r0, r6
 80022d2:	f000 f868 	bl	80023a6 <__malloc_unlock>
 80022d6:	e7e4      	b.n	80022a2 <_malloc_r+0x1e>
 80022d8:	680b      	ldr	r3, [r1, #0]
 80022da:	1b5b      	subs	r3, r3, r5
 80022dc:	d418      	bmi.n	8002310 <_malloc_r+0x8c>
 80022de:	2b0b      	cmp	r3, #11
 80022e0:	d90f      	bls.n	8002302 <_malloc_r+0x7e>
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	50cd      	str	r5, [r1, r3]
 80022e6:	18cc      	adds	r4, r1, r3
 80022e8:	4630      	mov	r0, r6
 80022ea:	f000 f85c 	bl	80023a6 <__malloc_unlock>
 80022ee:	f104 000b 	add.w	r0, r4, #11
 80022f2:	1d23      	adds	r3, r4, #4
 80022f4:	f020 0007 	bic.w	r0, r0, #7
 80022f8:	1ac3      	subs	r3, r0, r3
 80022fa:	d0d3      	beq.n	80022a4 <_malloc_r+0x20>
 80022fc:	425a      	negs	r2, r3
 80022fe:	50e2      	str	r2, [r4, r3]
 8002300:	e7d0      	b.n	80022a4 <_malloc_r+0x20>
 8002302:	428c      	cmp	r4, r1
 8002304:	684b      	ldr	r3, [r1, #4]
 8002306:	bf16      	itet	ne
 8002308:	6063      	strne	r3, [r4, #4]
 800230a:	6013      	streq	r3, [r2, #0]
 800230c:	460c      	movne	r4, r1
 800230e:	e7eb      	b.n	80022e8 <_malloc_r+0x64>
 8002310:	460c      	mov	r4, r1
 8002312:	6849      	ldr	r1, [r1, #4]
 8002314:	e7cc      	b.n	80022b0 <_malloc_r+0x2c>
 8002316:	1cc4      	adds	r4, r0, #3
 8002318:	f024 0403 	bic.w	r4, r4, #3
 800231c:	42a0      	cmp	r0, r4
 800231e:	d005      	beq.n	800232c <_malloc_r+0xa8>
 8002320:	1a21      	subs	r1, r4, r0
 8002322:	4630      	mov	r0, r6
 8002324:	f000 f82e 	bl	8002384 <_sbrk_r>
 8002328:	3001      	adds	r0, #1
 800232a:	d0cf      	beq.n	80022cc <_malloc_r+0x48>
 800232c:	6025      	str	r5, [r4, #0]
 800232e:	e7db      	b.n	80022e8 <_malloc_r+0x64>
 8002330:	20000090 	.word	0x20000090
 8002334:	20000094 	.word	0x20000094

08002338 <_realloc_r>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	4607      	mov	r7, r0
 800233c:	4614      	mov	r4, r2
 800233e:	460e      	mov	r6, r1
 8002340:	b921      	cbnz	r1, 800234c <_realloc_r+0x14>
 8002342:	4611      	mov	r1, r2
 8002344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002348:	f7ff bf9c 	b.w	8002284 <_malloc_r>
 800234c:	b922      	cbnz	r2, 8002358 <_realloc_r+0x20>
 800234e:	f7ff ff4b 	bl	80021e8 <_free_r>
 8002352:	4625      	mov	r5, r4
 8002354:	4628      	mov	r0, r5
 8002356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002358:	f000 f826 	bl	80023a8 <_malloc_usable_size_r>
 800235c:	42a0      	cmp	r0, r4
 800235e:	d20f      	bcs.n	8002380 <_realloc_r+0x48>
 8002360:	4621      	mov	r1, r4
 8002362:	4638      	mov	r0, r7
 8002364:	f7ff ff8e 	bl	8002284 <_malloc_r>
 8002368:	4605      	mov	r5, r0
 800236a:	2800      	cmp	r0, #0
 800236c:	d0f2      	beq.n	8002354 <_realloc_r+0x1c>
 800236e:	4631      	mov	r1, r6
 8002370:	4622      	mov	r2, r4
 8002372:	f7ff ff15 	bl	80021a0 <memcpy>
 8002376:	4631      	mov	r1, r6
 8002378:	4638      	mov	r0, r7
 800237a:	f7ff ff35 	bl	80021e8 <_free_r>
 800237e:	e7e9      	b.n	8002354 <_realloc_r+0x1c>
 8002380:	4635      	mov	r5, r6
 8002382:	e7e7      	b.n	8002354 <_realloc_r+0x1c>

08002384 <_sbrk_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4c06      	ldr	r4, [pc, #24]	; (80023a0 <_sbrk_r+0x1c>)
 8002388:	2300      	movs	r3, #0
 800238a:	4605      	mov	r5, r0
 800238c:	4608      	mov	r0, r1
 800238e:	6023      	str	r3, [r4, #0]
 8002390:	f7fe fa0c 	bl	80007ac <_sbrk>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_sbrk_r+0x1a>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	b103      	cbz	r3, 800239e <_sbrk_r+0x1a>
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	2000009c 	.word	0x2000009c

080023a4 <__malloc_lock>:
 80023a4:	4770      	bx	lr

080023a6 <__malloc_unlock>:
 80023a6:	4770      	bx	lr

080023a8 <_malloc_usable_size_r>:
 80023a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023ac:	1f18      	subs	r0, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bfbc      	itt	lt
 80023b2:	580b      	ldrlt	r3, [r1, r0]
 80023b4:	18c0      	addlt	r0, r0, r3
 80023b6:	4770      	bx	lr

080023b8 <_init>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr

080023c4 <_fini>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr
